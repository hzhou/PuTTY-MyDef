include: autoload.def

page: telnet
    autoload: h
    subcode: main
	$include ws2tcpip.h
	$(set:this=this->)

	$call api_create, telnet, backend
	$struct(backend_telnet) SOCKET socket

	$call @global
	$call @function_list

subcode: this_decl(var)
    $struct(backend_telnet) $(var)

# ---------------------------------------------------------
subcode: telnet_connect(host, port)
    $call socket_connect, $(host), $(port)
    $if tn_ret
	$.socket=tn_socket
	&call socket_select, tn_socket, this
	    $local struct backend_telnet * this
	    this=(struct backend_telnet *)data
	    #$call @debug_NETEVENT
	    $if tn_event==FD_READ
		$call telnet_read

subcode: telnet_disconnect
    close($.socket)
    $call clear_select, $.socket
    from_backend("remote closed.", 14)

# ---------------------------------------------------------
subcode: telnet_init
    $call get_config, "host", ts_host, "192.168.2.11"
    $call get_config, "port", tn_port, 23

    $call @on_telnet_init
    print telnet_init: $ts_host $tn_port
    $call telnet_connect, ts_host, tn_port
    $if !$.socket
	return "telnet: Failed to connect!"
    # $call request_minimum_options

subcode: telnet_free
    $if $.sb_buf
	free($.sb_buf)
    $if $.socket
	close($.socket)

# -------------------------------------
subcode: telnet_read
    $local ts_buf[1024], tn_len
    tn_ret=recv($.socket, ts_buf, sizeof(ts_buf), 0)
    $if tn_ret<0
	tn_ret=WSAGetLastError()
	$if tn_ret!=WSAEWOULDBLOCK
	    $call telnet_disconnect
    $elif tn_ret==0
	$call telnet_disconnect
    $else
	tn_len=tn_ret
	$call do_telnet_read, ts_buf, tn_len

subcode: telnet_send
    $if $.socket
	$local unsigned char * p
	$local unsigned char * end
	$local unsigned char * q
	p=ts_buf
	end=ts_buf+tn_len
	$while p<end
	    q=p
	    $while p<end && *p!=IAC
		p++
	    $call socket_send, q, p-q
	    $while p<end && *p==IAC
		$if *p==IAC
		    $local unsigned char iac[2] = {IAC,IAC}
		    $call socket_send, iac, 2
		$else
		    $local unsigned char cr[2] = {CR,NUL}
		    $call socket_send, cr, 2
		p++
    return 0

subcode: debug_telnet_send
    c=*$(buf)
    n=$(len)
    print telnet_send [$n] $c -- $tn_ret

subcode: socket_send(buf, len)
    tn_ret=send($.socket, (char *)$(buf), $(len), 0)
    $call @debug_telnet_send

# -------------------------------
subcode: telnet_size
    $.n_rows = tn_rows
    $.n_cols = tn_cols
    $if $.socket 
	$call telnet_size_send

subcode: telnet_size_send
    $local unsigned char b[24]
    $local int n
    n = 0;
    b[n++] = IAC;
    b[n++] = SB;
    b[n++] = TELOPT_NAWS;
    $call add_byte, $.n_rows>>8
    $call add_byte, $.n_rows&0xff
    $call add_byte, $.n_cols>>8
    $call add_byte, $.n_cols&0xff
    b[n++] = IAC;
    b[n++] = SE;
    $call socket_send, b, n

subcode: add_byte(byte)
    b[n]=$(byte)
    $if b[n]==IAC
	n++
	b[n]=IAC
    n++

# ============================================
subcode: do_telnet_read(buf, len)
    $call da_init, out
    $local unsigned char * ts, int c
    ts=$(buf)
    c=*ts
    print do_telnet_read: $$(len) - $c ...
    $while $(len)--
	c = *ts++
	$call do_telnet_read_char
	$else
	    $call da_add, out, c
	    $.n_state = TOP_LEVEL;

    $if out_len
	tn_ret=from_backend(out_buf, out_len)
    print "done do_telnet_read"
    $if out_buf
	free(out_buf)

subcode: do_telnet_read_char
    $if $.n_state==IAC
	$if c>=250 && c<=254
	    $.n_state=c
	$else
	    $if c==IAC
		$call da_add, out, c
	    $.n_state=TOP_LEVEL
    $map do_telnet_IAC, WILL, WONT, DO, DONT
    $call do_telnet_process_SUBNEGOT
    # $call @do_telnet_read_CR
    # $call @do_telnet_sync
    $elif $.n_state != TOP_LEVEL
	$.n_state=TOP_LEVEL
    $elif c==IAC
	$.n_state=IAC
	continue

# ---- -------------------------------
subcode:: global
    $call this_decl, n_state 

subcode:: on_telnet_init
    $define(TOP_LEVEL) 0
    $define(SUBNEGOT) 1
    $define(SUBNEG_IAC) 2
    $.n_state=TOP_LEVEL

subcode: da_init(name)
    $local char * $(name)_buf=NULL
    $local int $(name)_len=0
    $local int $(name)_size=0

subcode: da_add(name, c)
    $if $(name)_len>=$(name)_size
	$(name)_size=$(name)_len+1024
	$(name)_buf=realloc($(name)_buf, $(name)_size)
	print "da_add, realloc, new address %x", $(name)_buf
    $(name)_buf[$(name)_len++]=$(c)

# -------------------
subcode: do_telnet_sync
    $if $.in_synch && c==DM
	$.in_synch=0
	continue

# --------------------
subcode: do_telnet_read_CR
    $if c== CR && $.opt_states[o_they_bin.index] != ACTIVE
	$.n_state = SEENCR
	continue
    $elif c==NUL && $.n_state==SEENCR
	$.n_state=TOP_LEVEL
	continue

# --------------------
subcode: do_telnet_IAC(cmd)
    $elif $.n_state==$(cmd)
	n_cmd=$(cmd)
	n_opt=c
	$call @debug_IAC
	$call proc_rec_opt
	$.n_state=TOP_LEVEL

subcode: debug_IAC
    print IAC $(cmd) $c

# ---------------------
subcode: request_minimum_options
    $call send_opt, DO, TELOPT_ECHO
    $call send_opt, DO, TELOPT_SGA
    $call send_opt, WILL, TELOPT_SGA


subcode: proc_rec_opt
    $if 0
	# NOOP
    #$map proc_opt, NAWS, ECHO, SGA
    $else
	$if n_cmd==WILL
	    $call send_opt, DONT, n_opt
	$elif n_cmd==DO
	    $call send_opt, WONT, n_opt

subcode: proc_opt(OPT)
    $elif n_opt==TELOPT_$(OPT)
	$if n_cmd==DO
	    $call send_opt, WILL, n_opt
	    $call @on_DO_$(OPT)
	$elif n_cmd==DONT
	    $call send_opt, WONT, n_opt
	    $call @on_DONt_$(OPT)
	$elif n_cmd==WILL
	    $call send_opt, DO, n_opt
	    $call @on_WILL_$(OPT)
	$elif n_cmd==WONT
	    $call send_opt, DONT, n_opt
	    $call @on_WONT_$(OPT)

subcode: send_opt(cmd, opt)
    print send_opt $(cmd)  $$(opt)
    $local pc_buf[100]
    pc_buf[0]=IAC
    pc_buf[1]=$(cmd)
    pc_buf[2]=$(opt)

    $call socket_send, pc_buf, 3

# -------------------
# -- NAWS
subcode: on_DO_NAWS
    $call this_decl, n_WILL_NAWS
    $.n_WILL_NAWS=2
    $call telnet_size_send

# -- ECHO
subcode:: on_telnet_init
    $call this_decl, b_echo

subcode: on_WILL_ECHO
    $.b_echo=1

subcode: on_WONT_ECHO
    $.b_echo=0

# -- SGA
subcode:: on_telnet_init
    $call this_decl, b_edit

subcode: on_WILL_SGA
    $.b_edit=1

subcode: on_WONT_SGA
    $.b_edit=0

# --------
subcode:: global
    $call this_decl, int sb_opt
    $map this_decl, char * sb_buf, int sb_size, int sb_len

subcode:: on_telnet_init
    $.sb_buf=NULL
    $.sb_len=0
    $.sb_size=0

subcode: do_telnet_process_SUBNEGOT
    $elif $.n_state==SB
	$.sb_opt=c
	$.sb_len=0
	$.n_state=SUBNEGOT
    $elif $.n_state==SUBNEGOT
	$if c==IAC
	    $.n_state=SUBNEG_IAC
	$else
	    $call da_add, this->sb, c
    $elif $.n_state==SUBNEG_IAC
	$if c==SE
	    # $call process_subneg
	    $.n_state = TOP_LEVEL;
	$else
	    $call da_add, this->sb, c
	    $.n_state=SUBNEGOT

# ----
subcode: process_subneg
    $if $.sb_opt==TELOPT_TSPEED
	$call process_subneg_TSPEED
    $elif $.sb_opt==TELOPT_TTYPE
	$call process_subneg_TTYPE
    $elif $.sb_opt==TELOPT_OLD_ENVIRON || $.sb_opt==TELOPT_NEW_ENVIRON
	$call process_subneg_ENVIRON

subcode: process_subneg_TSPEED
    $local unsigned char b[2048]
    $if $.sb_len == 1 && $.sb_buf[0] == TELQUAL_SEND
	b[0] = IAC;
	b[1] = SB;
	b[2] = TELOPT_TSPEED;
	b[3] = TELQUAL_IS;
	strcpy((char *)(b + 4), telnet->cfg.termspeed);
	n = 4 + strlen(telnet->cfg.termspeed);
	b[n] = IAC;
	b[n + 1] = SE;
	$call socket_send, b, n+2
	logevent(telnet->frontend, "server:\tSB TSPEED SEND");
    $else
	logevent(telnet->frontend, "server:\tSB TSPEED <something weird>");

subcode: process_subneg_TTYPE
    $local unsigned char b[2048]
    $if telnet->sb_len == 1 && telnet->sb_buf[0] == TELQUAL_SEND
	b[0] = IAC;
	b[1] = SB;
	b[2] = TELOPT_TTYPE;
	b[3] = TELQUAL_IS;
	for (n = 0; telnet->cfg.termtype[n]; n++)
	    b[n + 4] = (telnet->cfg.termtype[n] >= 'a'
			&& telnet->cfg.termtype[n] <=
			'z' ? telnet->cfg.termtype[n] + 'A' -
			'a' : telnet->cfg.termtype[n]);
	b[n + 4] = IAC;
	b[n + 5] = SE;
	$call socket_send, b, n+6
	b[n + 4] = 0;
	logevent(telnet->frontend, "server:\tSB TTYPE SEND");
    $else
	logevent(telnet->frontend, "server:\tSB TTYPE <something weird>\r\n");

subcode: process_subneg_ENVIRON
    $local unsigned char * p
    $local unsigned char * q
    p = telnet->sb_buf;
    q = p + telnet->sb_len;
    if (p < q && *p == TELQUAL_SEND) {
	p++;
	if (telnet->sb_opt == TELOPT_OLD_ENVIRON) {
	    if (telnet->cfg.rfc_environ) {
		value = RFC_VALUE;
		var = RFC_VAR;
	    } else {
		value = BSD_VALUE;
		var = BSD_VAR;
	    }
	    /*
	     * Try to guess the sense of VAR and VALUE.
	     */
	    while (p < q) {
		if (*p == RFC_VAR) {
		    value = RFC_VALUE;
		    var = RFC_VAR;
		} else if (*p == BSD_VAR) {
		    value = BSD_VALUE;
		    var = BSD_VAR;
		}
		p++;
	    }
	} else {
	    /*
	     * With NEW_ENVIRON, the sense of VAR and VALUE
	     * isn't in doubt.
	     */
	    value = RFC_VALUE;
	    var = RFC_VAR;
	}
	b[0] = IAC;
	b[1] = SB;
	b[2] = telnet->sb_opt;
	b[3] = TELQUAL_IS;
	n = 4;
	e = telnet->cfg.environmt;
	while (*e) {
	    b[n++] = var;
	    while (*e && *e != '\t')
		b[n++] = *e++;
	    if (*e == '\t')
		e++;
	    b[n++] = value;
	    while (*e)
		b[n++] = *e++;
	    e++;
	}
	{
	    char user[sizeof(telnet->cfg.username)];
	    (void) get_remote_username(&telnet->cfg, user, sizeof(user));
	    if (*user) {
		b[n++] = var;
		b[n++] = 'U';
		b[n++] = 'S';
		b[n++] = 'E';
		b[n++] = 'R';
		b[n++] = value;
		e = user;
		while (*e)
		    b[n++] = *e++;
	    }
	    b[n++] = IAC;
	    b[n++] = SE;
	    $call socket_send, b, n
	}
    }
# ====================================================
# ===============================================
subcode: telnet_structs
    #define iswritable(x) \
	    ( (x) != IAC && \
		  (telnet->opt_states[o_we_bin.index] == ACTIVE || (x) != CR))

    static char *telopt(int opt)
    {
    #define telnet_str(x,y) case TELOPT_##x: return #x;
	switch (opt) {
	    TELOPTS(telnet_str)
	  default:
	    return "<unknown>";
	}
    #undef telnet_str
    }

    $(set:OPTLIST=NAWS,TSPEED,TTYPE,OENV,NENV,ECHO,WE_SGA,THEY_SGA,WE_BIN,THEY_BIN)

    struct Opt {
	int send;			       /* what we initially send */
	int nsend;			       /* -ve send if requested to stop it */
	int ack, nak;		       /* +ve and -ve acknowledgements */
	int option;			       /* the option code */
	int index;			       /* index into telnet->opt_states[] */
	enum {
	    REQUESTED, ACTIVE, INACTIVE, REALLY_INACTIVE
	} initial_state;
    };

    enum {
	OPTINDEX_NAWS,
	OPTINDEX_TSPEED,
	OPTINDEX_TTYPE,
	OPTINDEX_OENV,
	OPTINDEX_NENV,
	OPTINDEX_ECHO,
	OPTINDEX_WE_SGA,
	OPTINDEX_THEY_SGA,
	OPTINDEX_WE_BIN,
	OPTINDEX_THEY_BIN,
	NUM_OPTS
    };

    static const struct Opt o_naws =
	{ WILL, WONT, DO, DONT, TELOPT_NAWS, OPTINDEX_NAWS, REQUESTED };
    static const struct Opt o_tspeed =
	{ WILL, WONT, DO, DONT, TELOPT_TSPEED, OPTINDEX_TSPEED, REQUESTED };
    static const struct Opt o_ttype =
	{ WILL, WONT, DO, DONT, TELOPT_TTYPE, OPTINDEX_TTYPE, REQUESTED };
    static const struct Opt o_oenv =
	{ WILL, WONT, DO, DONT, TELOPT_OLD_ENVIRON, OPTINDEX_OENV, INACTIVE };
    static const struct Opt o_nenv =
	{ WILL, WONT, DO, DONT, TELOPT_NEW_ENVIRON, OPTINDEX_NENV, REQUESTED };
    static const struct Opt o_echo =
	{ DO, DONT, WILL, WONT, TELOPT_ECHO, OPTINDEX_ECHO, REQUESTED };
    static const struct Opt o_we_sga =
	{ WILL, WONT, DO, DONT, TELOPT_SGA, OPTINDEX_WE_SGA, REQUESTED };
    static const struct Opt o_they_sga =
	{ DO, DONT, WILL, WONT, TELOPT_SGA, OPTINDEX_THEY_SGA, REQUESTED };
    static const struct Opt o_we_bin =
	{ WILL, WONT, DO, DONT, TELOPT_BINARY, OPTINDEX_WE_BIN, INACTIVE };
    static const struct Opt o_they_bin =
	{ DO, DONT, WILL, WONT, TELOPT_BINARY, OPTINDEX_THEY_BIN, INACTIVE };

    static const struct Opt *const opts[] = {
	&o_naws, &o_tspeed, &o_ttype, &o_oenv, &o_nenv, &o_echo,
	&o_we_sga, &o_they_sga, &o_we_bin, &o_they_bin, NULL
    };

    typedef struct telnet_tag {
	const struct plug_function_table *fn;
	/* the above field _must_ be first in the structure */

	SOCKET s;

	void *frontend;
	void *ldisc;
	int term_width, term_height;

	int opt_states[NUM_OPTS];

	int echoing, editing;
	int activated;
	int bufsize;
	int in_synch;
	int sb_opt, sb_len;
	unsigned char *sb_buf;
	int sb_size;

	enum {
	    TOP_LEVEL, SEENIAC, SEENWILL, SEENWONT, SEENDO, SEENDONT,
		SEENSB, SUBNEGOT, SUBNEG_IAC, SEENCR
	} state;

	Config cfg;

	Pinger pinger;
    } *Telnet;

    #define TELNET_MAX_BACKLOG 4096

subcode: telnet_defines

    #define GA      249		       /* you may reverse the line */
    #define EL      248		       /* erase the current line */
    #define EC      247		       /* erase the current character */
    #define	AYT	246		       /* are you there */
    #define	AO	245		       /* abort output--but let prog finish */
    #define	IP	244		       /* interrupt process--permanently */
    #define	BREAK	243		       /* break */
    #define DM      242		       /* data mark--for connect. cleaning */
    #define NOP     241		       /* nop */
    #define EOR     239		       /* end of record (transparent mode) */
    #define ABORT   238		       /* Abort process */
    #define SUSP    237		       /* Suspend process */
    #define xEOF    236		       /* End of file: EOF is already used... */

    #define telnet_enum(x,y) TELOPT_##x = y,
    enum { TELOPTS(telnet_enum) dummy=0 };
    #undef telnet_enum

    #define	TELQUAL_IS	0	       /* option is... */
    #define	TELQUAL_SEND	1	       /* send option */
    #define	TELQUAL_INFO	2	       /* ENVIRON: informational version of IS */
    #define BSD_VAR 1
    #define BSD_VALUE 0
    #define RFC_VAR 0
    #define RFC_VALUE 1

    #define CR 13
    #define LF 10
    #define NUL 0

/*
 * Send Telnet special codes.
 */
static void telnet_special(void *handle, Telnet_Special code)
{
    Telnet telnet = (Telnet) handle;
    unsigned char b[2];

    if (telnet->s == NULL)
	return;

    b[0] = IAC;
    switch (code) {
      case TS_AYT:
	b[1] = AYT;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_BRK:
	b[1] = BREAK;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EC:
	b[1] = EC;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EL:
	b[1] = EL;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_GA:
	b[1] = GA;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_NOP:
	b[1] = NOP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_ABORT:
	b[1] = ABORT;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_AO:
	b[1] = AO;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_IP:
	b[1] = IP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_SUSP:
	b[1] = SUSP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOR:
	b[1] = EOR;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOF:
	b[1] = xEOF;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOL:
	/* In BINARY mode, CR-LF becomes just CR -
	 * and without the NUL suffix too. */
	if (telnet->opt_states[o_we_bin.index] == ACTIVE)
	    telnet->bufsize = sk_write(telnet->s, "\r", 1);
	else
	    telnet->bufsize = sk_write(telnet->s, "\r\n", 2);
	break;
      case TS_SYNCH:
	b[1] = DM;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 1);
	telnet->bufsize = sk_write_oob(telnet->s, (char *)(b + 1), 1);
	break;
      case TS_RECHO:
	if (telnet->opt_states[o_echo.index] == INACTIVE ||
	    telnet->opt_states[o_echo.index] == REALLY_INACTIVE) {
	    telnet->opt_states[o_echo.index] = REQUESTED;
	    $call send_opt, o_echo.send, o_echo.option
	}
	break;
      case TS_LECHO:
	if (telnet->opt_states[o_echo.index] == ACTIVE) {
	    telnet->opt_states[o_echo.index] = REQUESTED;
	    $call send_opt, o_echo.nsend, o_echo.option
	}
	break;
      case TS_PING:
	if (telnet->opt_states[o_they_sga.index] == ACTIVE) {
	    b[1] = NOP;
	    telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	}
	break;
      default:
	break;	/* never heard of it */
    }
}

static const struct telnet_special *telnet_get_specials(void *handle)
{
    static const struct telnet_special specials[] = {
	{"Are You There", TS_AYT},
	{"Break", TS_BRK},
	{"Synch", TS_SYNCH},
	{"Erase Character", TS_EC},
	{"Erase Line", TS_EL},
	{"Go Ahead", TS_GA},
	{"No Operation", TS_NOP},
	{NULL, TS_SEP},
	{"Abort Process", TS_ABORT},
	{"Abort Output", TS_AO},
	{"Interrupt Process", TS_IP},
	{"Suspend Process", TS_SUSP},
	{NULL, TS_SEP},
	{"End Of Record", TS_EOR},
	{"End Of File", TS_EOF},
	{NULL, TS_EXITMENU}
    };
    return specials;
}

# =========================================================
subcode:: global
    $define(IAC) 255
    $define(DONT) 254
    $define(DO) 253
    $define(WONT) 252
    $define(WILL) 251
    $define(SB) 250

    $define(SE) 240

    $define(NUL) 0
    $define(CR) 13

    $define(TELOPT_BINARY) 0
    $define(TELOPT_ECHO) 1
    $define(TELOPT_RCP) 2
    $define(TELOPT_SGA) 3
    $define(TELOPT_NAMS) 4
    $define(TELOPT_STATUS) 5
    $define(TELOPT_TM) 6
    $define(TELOPT_RCTE) 7
    $define(TELOPT_NAOL) 8
    $define(TELOPT_NAOP) 9
    $define(TELOPT_NAOCRD) 10
    $define(TELOPT_NAOHTS) 11
    $define(TELOPT_NAOHTD) 12
    $define(TELOPT_NAOFFD) 13
    $define(TELOPT_NAOVTS) 14
    $define(TELOPT_NAOVTD) 15
    $define(TELOPT_NAOLFD) 16
    $define(TELOPT_XASCII) 17
    $define(TELOPT_LOGOUT) 18
    $define(TELOPT_BM) 19
    $define(TELOPT_DET) 20
    $define(TELOPT_SUPDUP) 21
    $define(TELOPT_SUPDUPOUTPUT) 22
    $define(TELOPT_SNDLOC) 23
    $define(TELOPT_TTYPE) 24
    $define(TELOPT_EOR) 25
    $define(TELOPT_TUID) 26
    $define(TELOPT_OUTMRK) 27
    $define(TELOPT_TTYLOC) 28
    $define(TELOPT_3270REGIME) 29
    $define(TELOPT_X3PAD) 30
    $define(TELOPT_NAWS) 31
    $define(TELOPT_TSPEED) 32
    $define(TELOPT_LFLOW) 33
    $define(TELOPT_LINEMODE) 34
    $define(TELOPT_XDISPLOC) 35
    $define(TELOPT_OLD_ENVIRON) 36
    $define(TELOPT_AUTHENTICATION) 37
    $define(TELOPT_ENCRYPT) 38
    $define(TELOPT_NEW_ENVIRON) 39
    $define(TELOPT_TN3270E) 40
    $define(TELOPT_XAUTH) 41
    $define(TELOPT_CHARSET) 42
    $define(TELOPT_RSP) 43
    $define(TELOPT_COM_PORT_OPTION) 44
    $define(TELOPT_SLE) 45
    $define(TELOPT_STARTTLS) 46
    $define(TELOPT_KERMIT) 47
    $define(TELOPT_SEND_URL) 48
    $define(TELOPT_FORWARD_X) 49
    $define(TELOPT_PRAGMA_LOGON) 138
    $define(TELOPT_SSPI_LOGON) 139
    $define(TELOPT_PRAGMA_HEARTBEAT) 140
    $define(TELOPT_EXOPL) 255

