page: telnet
    subcode: main
	$(set:this=telnet->)
	$typedef struct tagTelnet * Telnet
	$call @global
	$call @function_list

subcode: this_decl(var)
    $struct(tagTelnet) $(var)

/*
 * Generate side effects of enabling or disabling an option.
 */
static void option_side_effects(Telnet telnet, const struct Opt *o, int enabled)
{
    if (o->option == TELOPT_ECHO && o->send == DO)
	telnet->echoing = !enabled;
    else if (o->option == TELOPT_SGA && o->send == DO)
	telnet->editing = !enabled;
    //if (telnet->ldisc) ldisc_send(telnet->ldisc, NULL, 0, 0);

    /* Ensure we get the minimum options */
    if (!telnet->activated) {
	if (telnet->opt_states[o_echo.index] == INACTIVE) {
	    telnet->opt_states[o_echo.index] = REQUESTED;
	    $call send_opt, o_echo.send, o_echo.option
	}
	if (telnet->opt_states[o_we_sga.index] == INACTIVE) {
	    telnet->opt_states[o_we_sga.index] = REQUESTED;
	    $call send_opt, o_we_sga.send, o_we_sga.option
	}
	if (telnet->opt_states[o_they_sga.index] == INACTIVE) {
	    telnet->opt_states[o_they_sga.index] = REQUESTED;
	    $call send_opt, o_they_sga.send, o_they_sga.option
	}
	telnet->activated = TRUE;
    }
}

subcode: request_minimum_options
    $call send_opt, DO, TELOPT_ECHO
    $call send_opt, DO, TELOPT_SGA
    $call send_opt, WILL, TELOPT_SGA


subcode: proc_rec_opt(n_cmd, n_opt)
    $call proc_opt, NAWS
    $else
	$if n_cmd==WILL
	    $call send_opt, DONT, n_opt
	$elif n_cmd==DO
	    $call send_opt, WONT, n_opt

subcode: proc_opt(OPT)
    $if n_opt==TELOPT_$(OPT)
	$if n_cmd==DO
	    $if $.n_$(OPT)==INACTIVE
		$call send_opt, WILL, n_opt
	    $.n_$(OPT)=ACTIVE
	    $call @on_DO_$(OPT)
	$elif n_cmd==DONT
	    $if $.n_$(OPT)==INACTIVE
		$call send_opt, WONT, n_opt
	    $.n_$(OPT)==INACTIVE
	    $call @on_DONt_$(OPT)
	$elif n_cmd==WILL
	    $if $.n_$(OPT)==INACTIVE
		$call send_opt, DO, n_opt
	    $.n_$(OPT)=ACTIVE
	    $call @on_WILL_$(OPT)
	$elif n_cmd==WONT
	    $if $.n_$(OPT)==INACTIVE
		$call send_opt, DONT, n_opt
	    $.n_$(OPT)==INACTIVE
	    $call @on_WONT_$(OPT)

# -- NAWS
subcode:: on_telnet_init
    $call this_decl, n_NAWS
    $.n_NAWS=INACTIVE

subcode: on_DO_NAWS
    telnet_size(telnet, $.term_width, $.term_height)

# -- ECHO
subcode:: on_telnet_init
    $call this_decl, b_echo
    $.b_echo=0

subcode: on_WILL_ECHO
    $.b_echo=1

subcode: on_WONT_ECHO
    $.b_echo=0

# -- SGA
subcode:: on_telnet_init
    $call this_decl, b_edit
    $.b_edit=0

subcode: on_WILL_SGA
    $.b_edit=1

subcode: on_WONT_SGA
    $.b_edit=0

static void process_subneg(Telnet telnet)
{
    unsigned char b[2048], *p, *q;
    int var, value, n;
    char *e;

    switch (telnet->sb_opt) {
      case TELOPT_TSPEED:
	if (telnet->sb_len == 1 && telnet->sb_buf[0] == TELQUAL_SEND) {
	    char *logbuf;
	    b[0] = IAC;
	    b[1] = SB;
	    b[2] = TELOPT_TSPEED;
	    b[3] = TELQUAL_IS;
	    strcpy((char *)(b + 4), telnet->cfg.termspeed);
	    n = 4 + strlen(telnet->cfg.termspeed);
	    b[n] = IAC;
	    b[n + 1] = SE;
	    telnet->bufsize = sk_write(telnet->s, (char *)b, n + 2);
	    logevent(telnet->frontend, "server:\tSB TSPEED SEND");
	    logbuf = dupprintf("client:\tSB TSPEED IS %s", telnet->cfg.termspeed);
	    logevent(telnet->frontend, logbuf);
	    sfree(logbuf);
	} else
	    logevent(telnet->frontend, "server:\tSB TSPEED <something weird>");
	break;
      case TELOPT_TTYPE:
	if (telnet->sb_len == 1 && telnet->sb_buf[0] == TELQUAL_SEND) {
	    char *logbuf;
	    b[0] = IAC;
	    b[1] = SB;
	    b[2] = TELOPT_TTYPE;
	    b[3] = TELQUAL_IS;
	    for (n = 0; telnet->cfg.termtype[n]; n++)
		b[n + 4] = (telnet->cfg.termtype[n] >= 'a'
			    && telnet->cfg.termtype[n] <=
			    'z' ? telnet->cfg.termtype[n] + 'A' -
			    'a' : telnet->cfg.termtype[n]);
	    b[n + 4] = IAC;
	    b[n + 5] = SE;
	    telnet->bufsize = sk_write(telnet->s, (char *)b, n + 6);
	    b[n + 4] = 0;
	    logevent(telnet->frontend, "server:\tSB TTYPE SEND");
	    logbuf = dupprintf("client:\tSB TTYPE IS %s", b + 4);
	    logevent(telnet->frontend, logbuf);
	    sfree(logbuf);
	} else
	    logevent(telnet->frontend, "server:\tSB TTYPE <something weird>\r\n");
	break;
      case TELOPT_OLD_ENVIRON:
      case TELOPT_NEW_ENVIRON:
	p = telnet->sb_buf;
	q = p + telnet->sb_len;
	if (p < q && *p == TELQUAL_SEND) {
	    char *logbuf;
	    p++;
	    logbuf = dupprintf("server:\tSB %s SEND", telopt(telnet->sb_opt));
	    logevent(telnet->frontend, logbuf);
	    sfree(logbuf);
	    if (telnet->sb_opt == TELOPT_OLD_ENVIRON) {
		if (telnet->cfg.rfc_environ) {
		    value = RFC_VALUE;
		    var = RFC_VAR;
		} else {
		    value = BSD_VALUE;
		    var = BSD_VAR;
		}
		/*
		 * Try to guess the sense of VAR and VALUE.
		 */
		while (p < q) {
		    if (*p == RFC_VAR) {
			value = RFC_VALUE;
			var = RFC_VAR;
		    } else if (*p == BSD_VAR) {
			value = BSD_VALUE;
			var = BSD_VAR;
		    }
		    p++;
		}
	    } else {
		/*
		 * With NEW_ENVIRON, the sense of VAR and VALUE
		 * isn't in doubt.
		 */
		value = RFC_VALUE;
		var = RFC_VAR;
	    }
	    b[0] = IAC;
	    b[1] = SB;
	    b[2] = telnet->sb_opt;
	    b[3] = TELQUAL_IS;
	    n = 4;
	    e = telnet->cfg.environmt;
	    while (*e) {
		b[n++] = var;
		while (*e && *e != '\t')
		    b[n++] = *e++;
		if (*e == '\t')
		    e++;
		b[n++] = value;
		while (*e)
		    b[n++] = *e++;
		e++;
	    }
	    {
		char user[sizeof(telnet->cfg.username)];
		(void) get_remote_username(&telnet->cfg, user, sizeof(user));
		if (*user) {
		    b[n++] = var;
		    b[n++] = 'U';
		    b[n++] = 'S';
		    b[n++] = 'E';
		    b[n++] = 'R';
		    b[n++] = value;
		    e = user;
		    while (*e)
			b[n++] = *e++;
		}
		b[n++] = IAC;
		b[n++] = SE;
		telnet->bufsize = sk_write(telnet->s, (char *)b, n);
		logbuf = dupprintf("client:\tSB %s IS %s%s%s%s",
				   telopt(telnet->sb_opt),
				   *user ? "USER=" : "",
				   user,
				   *user ? " " : "",
				   n == 6 ? "<nothing>" :
				   (*telnet->cfg.environmt ? "<stuff>" : ""));
		logevent(telnet->frontend, logbuf);
		sfree(logbuf);
	    }
	}
	break;
    }
}

# ============================================
subcode: do_telnet_read(buf, len)
    $call da_init, out
    $while $(len)--
	$local int c
	c = (unsigned char) *$(buf)++;
	$call @do_telnet_read_IAC
	$call @do_telnet_read_CR
	$call @do_telnet_sync
	$call da_add, out, c
	$.n_state = TOP_LEVEL;

    $if out_len
	tn_ret=from_backend(telnet->frontend, 0, outbuf, outbuflen)
	c_write(telnet, outbuf, outbuflen);
	sk_set_frozen(telnet->s, tn_ret > TELNET_MAX_BACKLOG);
    $if out_buf
	free(out_buf)

# ---- -------------------------------
subcode:: global
    $call this_decl, n_state 

subcode:: on_telnet_init
    $define(TOP_LEVEL) 0
    $define(SUBNEGOT) 1
    $define(SUBNEG_IAC) 2
    $.n_state=TOP_LEVEL

subcode: da_init(name)
    $local char * $(name)_buf=NULL
    $local int $(name)_len=0
    $local int $(name)_size=0

subcode: da_add(name, c)
    $if $(name)_len>=$(name)_size
	$(name)_size=$(name)_len+256
	$(name)_buf=realloc($(name)_buf, $(name)_size)
    $(name)_buf[$(name)_len++]=$(c)

# -------------------
subcode: do_telnet_sync
    $if $.in_synch && c==DM
	$.in_synch=0
	continue

# --------------------
subcode: do_telnet_read_CR
    $if c== CR && $.opt_states[o_they_bin.index] != ACTIVE
	$.n_state = SEENCR
	continue
    $elif c==NUL && $.n_state==SEENCR
	$.n_state=TOP_LEVEL
	continue

# --------------------
subcode:: global
    $define(IAC) 255
    $define(DONT) 254
    $define(DO) 253
    $define(WONT) 252
    $define(WILL) 251
    $define(SB) 250

    $define(SE) 240

subcode: do_telnet_read_IAC
    $if $.n_state!=TOP_LEVEL && $.n_state!=SEENCR
	$call do_telnet_process_IAC
	continue
    $elif c==IAC
	$.n_state=IAC
	continue

subcode: do_telnet_process_IAC
    $if $.n_state==IAC
	$if c>=250 && c<=254
	    $.n_state=c
	$else
	    $if c==IAC
		$call da_add, out, c
	    $elif c==DM
		$.in_synch=0
	    $.n_state=TOP_LEVEL
    $map do_telnet_IAC, WILL, WONT, DO, DONT
    $call @do_telnet_process_SUBNEGOT

subcode: do_telnet_IAC(cmd)
    $elif $.n_state==$(cmd)
	proc_rec_opt(telnet, $(cmd), c)
	$.n_state=TOP_LEVEL

# --------
subcode:: global
    $call this_decl, int sb_opt
    $call this_decl, char * sb_buf, int sb_size, int sb_len

subcode:: on_telnet_init
    $.sb_buf=NULL
    $.sb_len=0
    $.sb_size=0

subcode: do_telnet_process_SUBNEGOT
    $elif $.n_state==SB
	$.sb_opt=c
	$.sb_len=0
	$.n_state=SUBNEGOT
    $elif $.n_state==SUBNEGOT
	$if c==IAC
	    $.n_state=SUBNEG_IAC
	$else
	    $call da_add, telnet->sb, c
    $elif $.n_state==SUBNEG_IAC
	$if c==SE
	    process_subneg(telnet);
	    $.n_state = TOP_LEVEL;
	$else
	    $call da_add, telnet->sb, c
	    $.n_state=SUBNEGOT

# ====================================================
static void telnet_log(Plug plug, int type, SockAddr addr, int port,
		       const char *error_msg, int error_code)
{
    Telnet telnet = (Telnet) plug;
    char addrbuf[256], *msg;

    sk_getaddr(addr, addrbuf, lenof(addrbuf));

    if (type == 0)
	msg = dupprintf("Connecting to %s port %d", addrbuf, port);
    else
	msg = dupprintf("Failed to connect to %s: %s", addrbuf, error_msg);

    logevent(telnet->frontend, msg);
}

static int telnet_closing(Plug plug, const char *error_msg, int error_code,
			  int calling_back)
{
    Telnet telnet = (Telnet) plug;

    if (telnet->s) {
        sk_close(telnet->s);
        telnet->s = NULL;
	notify_remote_exit(telnet->frontend);
    }
    if (error_msg) {
	logevent(telnet->frontend, error_msg);
	connection_fatal(telnet->frontend, "%s", error_msg);
    }
    /* Otherwise, the remote side closed the connection normally. */
    return 0;
}

static int telnet_receive(Plug plug, int urgent, char *data, int len)
{
    Telnet telnet = (Telnet) plug;
    if (urgent)
	telnet->in_synch = TRUE;
    $call do_telnet_read, data, len
    return 1;
}

static void telnet_sent(Plug plug, int bufsize)
{
    Telnet telnet = (Telnet) plug;
    telnet->bufsize = bufsize;
}

/*
 * Called to set up the Telnet connection.
 *
 * Returns an error message, or NULL on success.
 *
 * Also places the canonical host name into `realhost'. It must be
 * freed by the caller.
 */
static const char *telnet_init(void *frontend_handle, void **backend_handle,
			       Config *cfg,
			       char *host, int port, char **realhost,
			       int nodelay, int keepalive)
{
    static const struct plug_function_table fn_table = {
	telnet_log,
	telnet_closing,
	telnet_receive,
	telnet_sent
    };
    SockAddr addr;
    const char *err;
    Telnet telnet;

    telnet = snew(struct telnet_tag);
    telnet->fn = &fn_table;
    telnet->cfg = *cfg;		       /* STRUCTURE COPY */
    telnet->s = NULL;
    telnet->echoing = TRUE;
    telnet->editing = TRUE;
    telnet->activated = FALSE;
    telnet->sb_buf = NULL;
    telnet->sb_size = 0;
    telnet->frontend = frontend_handle;
    telnet->term_width = telnet->cfg.width;
    telnet->term_height = telnet->cfg.height;
    telnet->ldisc = NULL;
    telnet->pinger = NULL;
    *backend_handle = telnet;

    /*
     * Try to find host.
     */
    {
	char *buf;
	buf = dupprintf("Looking up host \"%s\"%s", host,
			(cfg->addressfamily == ADDRTYPE_IPV4 ? " (IPv4)" :
			 (cfg->addressfamily == ADDRTYPE_IPV6 ? " (IPv6)" :
			  "")));
	logevent(telnet->frontend, buf);
	sfree(buf);
    }
    addr = name_lookup(host, port, realhost, &telnet->cfg, cfg->addressfamily);
    if ((err = sk_addr_error(addr)) != NULL) {
	sk_addr_free(addr);
	return err;
    }

    if (port < 0)
	port = 23;		       /* default telnet port */

    /*
     * Open socket.
     */
    telnet->s = new_connection(addr, *realhost, port, 0, 1,
			       nodelay, keepalive, (Plug) telnet, &telnet->cfg);
    if ((err = sk_socket_error(telnet->s)) != NULL)
	return err;

    telnet->pinger = pinger_new(&telnet->cfg, &telnet_backend, telnet);

    /*
     * Initialise option states.
     */
    if (telnet->cfg.passive_telnet) {
	const struct Opt *const *o;

	for (o = opts; *o; o++)
	    telnet->opt_states[(*o)->index] = INACTIVE;
    } else {
	const struct Opt *const *o;

	for (o = opts; *o; o++) {
	    telnet->opt_states[(*o)->index] = (*o)->initial_state;
	    if (telnet->opt_states[(*o)->index] == REQUESTED)
		$cal send_opt, (*o)->send, (*o)->option
	}
	telnet->activated = TRUE;
    }

    /*
     * Set up SYNCH state.
     */
    telnet->in_synch = FALSE;

    /*
     * We can send special commands from the start.
     */
    update_specials_menu(telnet->frontend);

    /*
     * loghost overrides realhost, if specified.
     */
    if (*telnet->cfg.loghost) {
	char *colon;

	sfree(*realhost);
	*realhost = dupstr(telnet->cfg.loghost);
	colon = strrchr(*realhost, ':');
	if (colon) {
	    /*
	     * FIXME: if we ever update this aspect of ssh.c for
	     * IPv6 literal management, this should change in line
	     * with it.
	     */
	    *colon++ = '\0';
	}
    }

    return NULL;
}

static void telnet_free(void *handle)
{
    Telnet telnet = (Telnet) handle;

    sfree(telnet->sb_buf);
    if (telnet->s)
	sk_close(telnet->s);
    if (telnet->pinger)
	pinger_free(telnet->pinger);
    sfree(telnet);
}
/*
 * Reconfigure the Telnet backend. There's no immediate action
 * necessary, in this backend: we just save the fresh config for
 * any subsequent negotiations.
 */
static void telnet_reconfig(void *handle, Config *cfg)
{
    Telnet telnet = (Telnet) handle;
    pinger_reconfig(telnet->pinger, &telnet->cfg, cfg);
    telnet->cfg = *cfg;		       /* STRUCTURE COPY */
}

/*
 * Called to send data down the Telnet connection.
 */
static int telnet_send(void *handle, char *buf, int len)
{
    Telnet telnet = (Telnet) handle;
    unsigned char *p, *end;
    static const unsigned char iac[2] = { IAC, IAC };
    static const unsigned char cr[2] = { CR, NUL };
#if 0
    static const unsigned char nl[2] = { CR, LF };
#endif

    if (telnet->s == NULL)
	return 0;

    p = (unsigned char *)buf;
    end = (unsigned char *)(buf + len);
    while (p < end) {
	unsigned char *q = p;

	while (p < end && iswritable(*p))
	    p++;
	telnet->bufsize = sk_write(telnet->s, (char *)q, p - q);

	while (p < end && !iswritable(*p)) {
	    telnet->bufsize = 
		sk_write(telnet->s, (char *)(*p == IAC ? iac : cr), 2);
	    p++;
	}
    }

    return telnet->bufsize;
}

/*
 * Called to query the current socket sendability status.
 */
static int telnet_sendbuffer(void *handle)
{
    Telnet telnet = (Telnet) handle;
    return telnet->bufsize;
}

/*
 * Called to set the size of the window from Telnet's POV.
 */
static void telnet_size(void *handle, int width, int height)
{
    Telnet telnet = (Telnet) handle;
    unsigned char b[24];
    int n;
    char *logbuf;

    telnet->term_width = width;
    telnet->term_height = height;

    if (telnet->s == NULL || telnet->opt_states[o_naws.index] != ACTIVE)
	return;
    n = 0;
    b[n++] = IAC;
    b[n++] = SB;
    b[n++] = TELOPT_NAWS;
    b[n++] = telnet->term_width >> 8;
    if (b[n-1] == IAC) b[n++] = IAC;   /* duplicate any IAC byte occurs */
    b[n++] = telnet->term_width & 0xFF;
    if (b[n-1] == IAC) b[n++] = IAC;   /* duplicate any IAC byte occurs */
    b[n++] = telnet->term_height >> 8;
    if (b[n-1] == IAC) b[n++] = IAC;   /* duplicate any IAC byte occurs */
    b[n++] = telnet->term_height & 0xFF;
    if (b[n-1] == IAC) b[n++] = IAC;   /* duplicate any IAC byte occurs */
    b[n++] = IAC;
    b[n++] = SE;
    telnet->bufsize = sk_write(telnet->s, (char *)b, n);
    logbuf = dupprintf("client:\tSB NAWS %d,%d",
		       telnet->term_width, telnet->term_height);
    logevent(telnet->frontend, logbuf);
    sfree(logbuf);
}

static int telnet_connected(void *handle)
{
    Telnet telnet = (Telnet) handle;
    return telnet->s != NULL;
}

static int telnet_sendok(void *handle)
{
    /* Telnet telnet = (Telnet) handle; */
    return 1;
}

static void telnet_unthrottle(void *handle, int backlog)
{
    Telnet telnet = (Telnet) handle;
    sk_set_frozen(telnet->s, backlog > TELNET_MAX_BACKLOG);
}

static int telnet_ldisc(void *handle, int option)
{
    Telnet telnet = (Telnet) handle;
    if (option == LD_ECHO)
	return telnet->echoing;
    if (option == LD_EDIT)
	return telnet->editing;
    return FALSE;
}

static void telnet_provide_ldisc(void *handle, void *ldisc)
{
    Telnet telnet = (Telnet) handle;
    telnet->ldisc = ldisc;
}

static void telnet_provide_logctx(void *handle, void *logctx)
{
    /* This is a stub. */
}

static int telnet_exitcode(void *handle)
{
    Telnet telnet = (Telnet) handle;
    if (telnet->s != NULL)
        return -1;                     /* still connected */
    else
        /* Telnet doesn't transmit exit codes back to the client */
        return 0;
}

/*
 * cfg_info for Telnet does nothing at all.
 */
static int telnet_cfg_info(void *handle)
{
    return 0;
}

Backend telnet_backend = {
    telnet_init,
    telnet_free,
    telnet_reconfig,
    telnet_send,
    telnet_sendbuffer,
    telnet_size,
    telnet_special,
    telnet_get_specials,
    telnet_connected,
    telnet_exitcode,
    telnet_sendok,
    telnet_ldisc,
    telnet_provide_ldisc,
    telnet_provide_logctx,
    telnet_unthrottle,
    telnet_cfg_info,
    "telnet",
    PROT_TELNET,
    23
};

# `END_ORIGINAL
# ===============================================
subcode: send_opt(n_cmd, n_opt)
    $local pc_buf[100]
    pc_buf[0]=IAC
    pc_buf[1]=n_cmd
    pc_buf[2]=n_opt
    telnet->bufsize = sk_write(telnet->s, (char *) pc_buf, 3)

# ===============================================
subcode: telnet_structs
    #define iswritable(x) \
	    ( (x) != IAC && \
		  (telnet->opt_states[o_we_bin.index] == ACTIVE || (x) != CR))

    static char *telopt(int opt)
    {
    #define telnet_str(x,y) case TELOPT_##x: return #x;
	switch (opt) {
	    TELOPTS(telnet_str)
	  default:
	    return "<unknown>";
	}
    #undef telnet_str
    }

    static void telnet_size(void *handle, int width, int height);

    $(set:OPTLIST=NAWS,TSPEED,TTYPE,OENV,NENV,ECHO,WE_SGA,THEY_SGA,WE_BIN,THEY_BIN)

    struct Opt {
	int send;			       /* what we initially send */
	int nsend;			       /* -ve send if requested to stop it */
	int ack, nak;		       /* +ve and -ve acknowledgements */
	int option;			       /* the option code */
	int index;			       /* index into telnet->opt_states[] */
	enum {
	    REQUESTED, ACTIVE, INACTIVE, REALLY_INACTIVE
	} initial_state;
    };

    enum {
	OPTINDEX_NAWS,
	OPTINDEX_TSPEED,
	OPTINDEX_TTYPE,
	OPTINDEX_OENV,
	OPTINDEX_NENV,
	OPTINDEX_ECHO,
	OPTINDEX_WE_SGA,
	OPTINDEX_THEY_SGA,
	OPTINDEX_WE_BIN,
	OPTINDEX_THEY_BIN,
	NUM_OPTS
    };

    static const struct Opt o_naws =
	{ WILL, WONT, DO, DONT, TELOPT_NAWS, OPTINDEX_NAWS, REQUESTED };
    static const struct Opt o_tspeed =
	{ WILL, WONT, DO, DONT, TELOPT_TSPEED, OPTINDEX_TSPEED, REQUESTED };
    static const struct Opt o_ttype =
	{ WILL, WONT, DO, DONT, TELOPT_TTYPE, OPTINDEX_TTYPE, REQUESTED };
    static const struct Opt o_oenv =
	{ WILL, WONT, DO, DONT, TELOPT_OLD_ENVIRON, OPTINDEX_OENV, INACTIVE };
    static const struct Opt o_nenv =
	{ WILL, WONT, DO, DONT, TELOPT_NEW_ENVIRON, OPTINDEX_NENV, REQUESTED };
    static const struct Opt o_echo =
	{ DO, DONT, WILL, WONT, TELOPT_ECHO, OPTINDEX_ECHO, REQUESTED };
    static const struct Opt o_we_sga =
	{ WILL, WONT, DO, DONT, TELOPT_SGA, OPTINDEX_WE_SGA, REQUESTED };
    static const struct Opt o_they_sga =
	{ DO, DONT, WILL, WONT, TELOPT_SGA, OPTINDEX_THEY_SGA, REQUESTED };
    static const struct Opt o_we_bin =
	{ WILL, WONT, DO, DONT, TELOPT_BINARY, OPTINDEX_WE_BIN, INACTIVE };
    static const struct Opt o_they_bin =
	{ DO, DONT, WILL, WONT, TELOPT_BINARY, OPTINDEX_THEY_BIN, INACTIVE };

    static const struct Opt *const opts[] = {
	&o_naws, &o_tspeed, &o_ttype, &o_oenv, &o_nenv, &o_echo,
	&o_we_sga, &o_they_sga, &o_we_bin, &o_they_bin, NULL
    };

    typedef struct telnet_tag {
	const struct plug_function_table *fn;
	/* the above field _must_ be first in the structure */

	Socket s;

	void *frontend;
	void *ldisc;
	int term_width, term_height;

	int opt_states[NUM_OPTS];

	int echoing, editing;
	int activated;
	int bufsize;
	int in_synch;
	int sb_opt, sb_len;
	unsigned char *sb_buf;
	int sb_size;

	enum {
	    TOP_LEVEL, SEENIAC, SEENWILL, SEENWONT, SEENDO, SEENDONT,
		SEENSB, SUBNEGOT, SUBNEG_IAC, SEENCR
	} state;

	Config cfg;

	Pinger pinger;
    } *Telnet;

    #define TELNET_MAX_BACKLOG 4096

subcode: telnet_defines

    #define GA      249		       /* you may reverse the line */
    #define EL      248		       /* erase the current line */
    #define EC      247		       /* erase the current character */
    #define	AYT	246		       /* are you there */
    #define	AO	245		       /* abort output--but let prog finish */
    #define	IP	244		       /* interrupt process--permanently */
    #define	BREAK	243		       /* break */
    #define DM      242		       /* data mark--for connect. cleaning */
    #define NOP     241		       /* nop */
    #define EOR     239		       /* end of record (transparent mode) */
    #define ABORT   238		       /* Abort process */
    #define SUSP    237		       /* Suspend process */
    #define xEOF    236		       /* End of file: EOF is already used... */

    #define TELOPTS(X) \
	X(BINARY, 0)                       /* 8-bit data path */ \
	X(ECHO, 1)                         /* echo */ \
	X(RCP, 2)                          /* prepare to reconnect */ \
	X(SGA, 3)                          /* suppress go ahead */ \
	X(NAMS, 4)                         /* approximate message size */ \
	X(STATUS, 5)                       /* give status */ \
	X(TM, 6)                           /* timing mark */ \
	X(RCTE, 7)                         /* remote controlled transmission and echo */ \
	X(NAOL, 8)                         /* negotiate about output line width */ \
	X(NAOP, 9)                         /* negotiate about output page size */ \
	X(NAOCRD, 10)                      /* negotiate about CR disposition */ \
	X(NAOHTS, 11)                      /* negotiate about horizontal tabstops */ \
	X(NAOHTD, 12)                      /* negotiate about horizontal tab disposition */ \
	X(NAOFFD, 13)                      /* negotiate about formfeed disposition */ \
	X(NAOVTS, 14)                      /* negotiate about vertical tab stops */ \
	X(NAOVTD, 15)                      /* negotiate about vertical tab disposition */ \
	X(NAOLFD, 16)                      /* negotiate about output LF disposition */ \
	X(XASCII, 17)                      /* extended ascic character set */ \
	X(LOGOUT, 18)                      /* force logout */ \
	X(BM, 19)                          /* byte macro */ \
	X(DET, 20)                         /* data entry terminal */ \
	X(SUPDUP, 21)                      /* supdup protocol */ \
	X(SUPDUPOUTPUT, 22)                /* supdup output */ \
	X(SNDLOC, 23)                      /* send location */ \
	X(TTYPE, 24)                       /* terminal type */ \
	X(EOR, 25)                         /* end or record */ \
	X(TUID, 26)                        /* TACACS user identification */ \
	X(OUTMRK, 27)                      /* output marking */ \
	X(TTYLOC, 28)                      /* terminal location number */ \
	X(3270REGIME, 29)                  /* 3270 regime */ \
	X(X3PAD, 30)                       /* X.3 PAD */ \
	X(NAWS, 31)                        /* window size */ \
	X(TSPEED, 32)                      /* terminal speed */ \
	X(LFLOW, 33)                       /* remote flow control */ \
	X(LINEMODE, 34)                    /* Linemode option */ \
	X(XDISPLOC, 35)                    /* X Display Location */ \
	X(OLD_ENVIRON, 36)                 /* Old - Environment variables */ \
	X(AUTHENTICATION, 37)              /* Authenticate */ \
	X(ENCRYPT, 38)                     /* Encryption option */ \
	X(NEW_ENVIRON, 39)                 /* New - Environment variables */ \
	X(TN3270E, 40)                     /* TN3270 enhancements */ \
	X(XAUTH, 41)                       \
	X(CHARSET, 42)                     /* Character set */ \
	X(RSP, 43)                         /* Remote serial port */ \
	X(COM_PORT_OPTION, 44)             /* Com port control */ \
	X(SLE, 45)                         /* Suppress local echo */ \
	X(STARTTLS, 46)                    /* Start TLS */ \
	X(KERMIT, 47)                      /* Automatic Kermit file transfer */ \
	X(SEND_URL, 48)                    \
	X(FORWARD_X, 49)                   \
	X(PRAGMA_LOGON, 138)               \
	X(SSPI_LOGON, 139)                 \
	X(PRAGMA_HEARTBEAT, 140)           \
	X(EXOPL, 255)                      /* extended-options-list */

    #define telnet_enum(x,y) TELOPT_##x = y,
    enum { TELOPTS(telnet_enum) dummy=0 };
    #undef telnet_enum

    #define	TELQUAL_IS	0	       /* option is... */
    #define	TELQUAL_SEND	1	       /* send option */
    #define	TELQUAL_INFO	2	       /* ENVIRON: informational version of IS */
    #define BSD_VAR 1
    #define BSD_VALUE 0
    #define RFC_VAR 0
    #define RFC_VALUE 1

    #define CR 13
    #define LF 10
    #define NUL 0

/*
 * Send Telnet special codes.
 */
static void telnet_special(void *handle, Telnet_Special code)
{
    Telnet telnet = (Telnet) handle;
    unsigned char b[2];

    if (telnet->s == NULL)
	return;

    b[0] = IAC;
    switch (code) {
      case TS_AYT:
	b[1] = AYT;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_BRK:
	b[1] = BREAK;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EC:
	b[1] = EC;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EL:
	b[1] = EL;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_GA:
	b[1] = GA;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_NOP:
	b[1] = NOP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_ABORT:
	b[1] = ABORT;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_AO:
	b[1] = AO;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_IP:
	b[1] = IP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_SUSP:
	b[1] = SUSP;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOR:
	b[1] = EOR;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOF:
	b[1] = xEOF;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	break;
      case TS_EOL:
	/* In BINARY mode, CR-LF becomes just CR -
	 * and without the NUL suffix too. */
	if (telnet->opt_states[o_we_bin.index] == ACTIVE)
	    telnet->bufsize = sk_write(telnet->s, "\r", 1);
	else
	    telnet->bufsize = sk_write(telnet->s, "\r\n", 2);
	break;
      case TS_SYNCH:
	b[1] = DM;
	telnet->bufsize = sk_write(telnet->s, (char *)b, 1);
	telnet->bufsize = sk_write_oob(telnet->s, (char *)(b + 1), 1);
	break;
      case TS_RECHO:
	if (telnet->opt_states[o_echo.index] == INACTIVE ||
	    telnet->opt_states[o_echo.index] == REALLY_INACTIVE) {
	    telnet->opt_states[o_echo.index] = REQUESTED;
	    $call send_opt, o_echo.send, o_echo.option
	}
	break;
      case TS_LECHO:
	if (telnet->opt_states[o_echo.index] == ACTIVE) {
	    telnet->opt_states[o_echo.index] = REQUESTED;
	    $call send_opt, o_echo.nsend, o_echo.option
	}
	break;
      case TS_PING:
	if (telnet->opt_states[o_they_sga.index] == ACTIVE) {
	    b[1] = NOP;
	    telnet->bufsize = sk_write(telnet->s, (char *)b, 2);
	}
	break;
      default:
	break;	/* never heard of it */
    }
}

static const struct telnet_special *telnet_get_specials(void *handle)
{
    static const struct telnet_special specials[] = {
	{"Are You There", TS_AYT},
	{"Break", TS_BRK},
	{"Synch", TS_SYNCH},
	{"Erase Character", TS_EC},
	{"Erase Line", TS_EL},
	{"Go Ahead", TS_GA},
	{"No Operation", TS_NOP},
	{NULL, TS_SEP},
	{"Abort Process", TS_ABORT},
	{"Abort Output", TS_AO},
	{"Interrupt Process", TS_IP},
	{"Suspend Process", TS_SUSP},
	{NULL, TS_SEP},
	{"End Of Record", TS_EOR},
	{"End Of File", TS_EOF},
	{NULL, TS_EXITMENU}
    };
    return specials;
}

