# ---- Write Clipboard -----------------------
subcode:: function_list
    $global n_ignore_clip=0
    $list write_clip, write_aclip

subcode: main_on_WM_DESTROYCLIPBOARD
    $if !n_ignore_clip
	$declare void term_deselect(TERM)
	term_deselect(term);
    n_ignore_clip = 0
    return 0;


# ----
subcode: prep_clipboard(suffix, size)
    $local HGLOBAL clipdata$(suffix)=NULL
    clipdata$(suffix) = GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE,$(size))
    $if !clipdata$(suffix)
	goto clip_cleanup

    $local void *lock$(suffix)
    lock$(suffix) = GlobalLock(clipdata$(suffix));
    $if !lock$(suffix)
	goto clip_cleanup
    BLOCK
    GlobalUnlock(clipdata$(suffix));

subcode: write_clipboard
    $if !b_must_deselect
	n_ignore_clip=1

    $if OpenClipboard(hwnd)
	EmptyClipboard();
	BLOCK
	CloseClipboard();
    $else
	return

    $if !b_must_deselect
	n_ignore_clip=0

subcode: clip_cleanup(suffix)
    $if clipdata$(suffix)
	GlobalFree(clipdata$(suffix))

fncode: write_aclip(void *frontend, s_data, n_len, b_must_deselect)
    &call prep_clipboard, 1, n_len+1
	memcpy(lock1, s_data, n_len);
	((unsigned char *) lock1)[n_len] = 0;
    &call write_clipboard
	SetClipboardData(CF_TEXT, clipdata1);

    clip_cleanup:
	$call clip_cleanup, 1

fncode: write_clip(void *frontend, wchar_t *ws_data, pn_attr, n_len, b_must_deselect)
    &call prep_clipboard, 1, n_len*sizeof(wchar_t)
	memcpy(lock1, ws_data, n_len * sizeof(wchar_t));

    n_len2 = WideCharToMultiByte(CP_ACP, 0, ws_data, n_len, 0, 0, NULL, NULL);
    &call prep_clipboard, 2, n_len2
	WideCharToMultiByte(CP_ACP, 0, ws_data, n_len, lock2, n_len2, NULL, NULL);

    $local HGLOBAL clipdata3 = NULL
    #&call prep_clipboard, 3

    &call write_clipboard
	SetClipboardData(CF_UNICODETEXT, clipdata1);
	SetClipboardData(CF_TEXT, clipdata2);
	if (clipdata3)
	    SetClipboardData(RegisterClipboardFormat(CF_RTF), clipdata3);

    clip_cleanup:
	$call clip_cleanup, 1
	$call clip_cleanup, 2
	$call clip_cleanup, 3

# --------------- Read Clipboard ---------------------------------
subcode:: function_list
    $global wchar_t *clipboard_contents=NULL, int clipboard_length
    $list request_paste, thread_read_clipboard, process_clipdata

fncode: request_paste(void *frontend)
    $local DWORD in_threadid
    CreateThread(NULL, 0, thread_read_clipboard, hwnd, 0, &in_threadid);

fncode: thread_read_clipboard(void * param)
    $return_type DWORD WINAPI
    $local HGLOBAL clipdata=NULL

    $if OpenClipboard(NULL)
	$if (clipdata = GetClipboardData(CF_UNICODETEXT))
	    process_clipdata(clipdata, 1)
	$elif (clipdata = GetClipboardData(CF_TEXT))
	    process_clipdata(clipdata, 0)
	$if clipboard_contents && clipboard_length>0
	    $call term_do_paste, clipboard_contents, clipboard_length
	CloseClipboard();
    return 0;

fncode: process_clipdata(HGLOBAL clipdata, b_unicode)
    $if clipboard_contents
	sfree(clipboard_contents)
    clipboard_contents = NULL;
    clipboard_length = 0;

    $if b_unicode
	$local wchar_t *p
	p = GlobalLock(clipdata);
	$if p
	    $local wchar_t *p2;
	    for(p2 = p; *p2; p2++);
	    clipboard_length = p2 - p;
	    clipboard_contents = snewn(clipboard_length + 1, wchar_t);
	    memcpy(clipboard_contents, p, clipboard_length * sizeof(wchar_t));
	    clipboard_contents[clipboard_length] = L'\0';
	    return 1
    $else
	s = GlobalLock(clipdata);
	$if s
	    n = MultiByteToWideChar(CP_ACP, 0, s, strlen(s) + 1, 0, 0)
	    clipboard_contents = snewn(n, wchar_t)
	    MultiByteToWideChar(CP_ACP, 0, s, strlen(s) + 1, clipboard_contents, n)
	    clipboard_length = n - 1
	    clipboard_contents[clipboard_length] = L'\0'
	    return 1
    return 0

###########################################
subcode: clip_rtf
	wchar_t unitab[256];
	char *rtf = NULL;
	unsigned char *tdata = (unsigned char *)lock2;
	wchar_t *udata = (wchar_t *)lock;
	int rtflen = 0, uindex = 0, tindex = 0;
	int rtfsize = 0;
	int multilen, blen, alen, totallen, i;
	char before[16], after[4];
	int fgcolour,  lastfgcolour  = 0;
	int bgcolour,  lastbgcolour  = 0;
	int attrBold,  lastAttrBold  = 0;
	int attrUnder, lastAttrUnder = 0;
	int palette[NALLCOLOURS];
	int numcolours;

	get_unitab(CP_ACP, unitab, 0);

	rtfsize = 100 + strlen(cfg.font.name);
	rtf = snewn(rtfsize, char);
	rtflen = sprintf(rtf, "{\\rtf1\\ansi\\deff0{\\fonttbl\\f0\\fmodern %s;}\\f0\\fs%d",
			 cfg.font.name, cfg.font.height*2);

	/*
	 * Add colour palette
	 * {\colortbl ;\red255\green0\blue0;\red0\green0\blue128;}
	 */

	/*
	 * First - Determine all colours in use
	 *    o  Foregound and background colours share the same palette
	 */
	if (pn_attr) {
	    memset(palette, 0, sizeof(palette));
	    for (i = 0; i < (len-1); i++) {
		fgcolour = ((pn_attr[i] & ATTR_FGMASK) >> ATTR_FGSHIFT);
		bgcolour = ((pn_attr[i] & ATTR_BGMASK) >> ATTR_BGSHIFT);

		if (pn_attr[i] & ATTR_REVERSE) {
		    int tmpcolour = fgcolour;	/* Swap foreground and background */
		    fgcolour = bgcolour;
		    bgcolour = tmpcolour;
		}

		if (bold_mode == BOLD_COLOURS && (pn_attr[i] & ATTR_BOLD)) {
		    if (fgcolour  <   8)	/* ANSI colours */
			fgcolour +=   8;
		    else if (fgcolour >= 256)	/* Default colours */
			fgcolour ++;
		}

		if (pn_attr[i] & ATTR_BLINK) {
		    if (bgcolour  <   8)	/* ANSI colours */
			bgcolour +=   8;
    		    else if (bgcolour >= 256)	/* Default colours */
			bgcolour ++;
		}

		palette[fgcolour]++;
		palette[bgcolour]++;
	    }

	    /*
	     * Next - Create a reduced palette
	     */
	    numcolours = 0;
	    for (i = 0; i < NALLCOLOURS; i++) {
		if (palette[i] != 0)
		    palette[i]  = ++numcolours;
	    }

	    /*
	     * Finally - Write the colour table
	     */
	    rtf = sresize(rtf, rtfsize + (numcolours * 25), char);
	    strcat(rtf, "{\\colortbl ;");
	    rtflen = strlen(rtf);

	    for (i = 0; i < NALLCOLOURS; i++) {
		if (palette[i] != 0) {
		    rtflen += sprintf(&rtf[rtflen], "\\red%d\\green%d\\blue%d;", defpal[i].rgbtRed, defpal[i].rgbtGreen, defpal[i].rgbtBlue);
		}
	    }
	    strcpy(&rtf[rtflen], "}");
	    rtflen ++;
	}

	/*
	 * We want to construct a piece of RTF that specifies the
	 * same Unicode text. To do this we will read back in
	 * parallel from the Unicode data in `udata' and the
	 * non-Unicode data in `tdata'. For each character in
	 * `tdata' which becomes the right thing in `udata' when
	 * looked up in `unitab', we just copy straight over from
	 * tdata. For each one that doesn't, we must WCToMB it
	 * individually and produce a \u escape sequence.
	 * 
	 * It would probably be more robust to just bite the bullet
	 * and WCToMB each individual Unicode character one by one,
	 * then MBToWC each one back to see if it was an accurate
	 * translation; but that strikes me as a horrifying number
	 * of Windows API calls so I want to see if this faster way
	 * will work. If it screws up badly we can always revert to
	 * the simple and slow way.
	 */
	while (tindex < len2 && uindex < len &&
	       tdata[tindex] && udata[uindex]) {
	    if (tindex + 1 < len2 &&
		tdata[tindex] == '\r' &&
		tdata[tindex+1] == '\n') {
		tindex++;
		uindex++;
            }

            /*
             * Set text pn_attributes
             */
            if (pn_attr) {
                if (rtfsize < rtflen + 64) {
		    rtfsize = rtflen + 512;
		    rtf = sresize(rtf, rtfsize, char);
                }

                /*
                 * Determine foreground and background colours
                 */
                fgcolour = ((pn_attr[tindex] & ATTR_FGMASK) >> ATTR_FGSHIFT);
                bgcolour = ((pn_attr[tindex] & ATTR_BGMASK) >> ATTR_BGSHIFT);

		if (pn_attr[tindex] & ATTR_REVERSE) {
		    int tmpcolour = fgcolour;	    /* Swap foreground and background */
		    fgcolour = bgcolour;
		    bgcolour = tmpcolour;
		}

		if (bold_mode == BOLD_COLOURS && (pn_attr[tindex] & ATTR_BOLD)) {
		    if (fgcolour  <   8)	    /* ANSI colours */
			fgcolour +=   8;
		    else if (fgcolour >= 256)	    /* Default colours */
			fgcolour ++;
                }

		if (pn_attr[tindex] & ATTR_BLINK) {
		    if (bgcolour  <   8)	    /* ANSI colours */
			bgcolour +=   8;
		    else if (bgcolour >= 256)	    /* Default colours */
			bgcolour ++;
                }

                /*
                 * Collect other attributes
                 */
		if (bold_mode != BOLD_COLOURS)
		    attrBold  = pn_attr[tindex] & ATTR_BOLD;
		else
		    attrBold  = 0;
                
		attrUnder = pn_attr[tindex] & ATTR_UNDER;

                /*
                 * Reverse video
		 *   o  If video isn't reversed, ignore colour attributes for default foregound
	         *	or background.
		 *   o  Special case where bolded text is displayed using the default foregound
		 *      and background colours - force to bolded RTF.
                 */
		if (!(pn_attr[tindex] & ATTR_REVERSE)) {
		    if (bgcolour >= 256)	    /* Default color */
			bgcolour  = -1;		    /* No coloring */

		    if (fgcolour >= 256) {	    /* Default colour */
			if (bold_mode == BOLD_COLOURS && (fgcolour & 1) && bgcolour == -1)
			    attrBold = ATTR_BOLD;   /* Emphasize text with bold attribute */

			fgcolour  = -1;		    /* No coloring */
		    }
		}

                /*
                 * Write RTF text attributes
                 */
		if (lastfgcolour != fgcolour) {
                    lastfgcolour  = fgcolour;
		    rtflen       += sprintf(&rtf[rtflen], "\\cf%d ", (fgcolour >= 0) ? palette[fgcolour] : 0);
                }

                if (lastbgcolour != bgcolour) {
                    lastbgcolour  = bgcolour;
                    rtflen       += sprintf(&rtf[rtflen], "\\highlight%d ", (bgcolour >= 0) ? palette[bgcolour] : 0);
                }

		if (lastAttrBold != attrBold) {
		    lastAttrBold  = attrBold;
		    rtflen       += sprintf(&rtf[rtflen], "%s", attrBold ? "\\b " : "\\b0 ");
		}

                if (lastAttrUnder != attrUnder) {
                    lastAttrUnder  = attrUnder;
                    rtflen        += sprintf(&rtf[rtflen], "%s", attrUnder ? "\\ul " : "\\ulnone ");
                }
	    }

	    if (unitab[tdata[tindex]] == udata[uindex]) {
		multilen = 1;
		before[0] = '\0';
		after[0] = '\0';
		blen = alen = 0;
	    } else {
		multilen = WideCharToMultiByte(CP_ACP, 0, unitab+uindex, 1,
					       NULL, 0, NULL, NULL);
		if (multilen != 1) {
		    blen = sprintf(before, "{\\uc%d\\u%d", multilen,
				   udata[uindex]);
		    alen = 1; strcpy(after, "}");
		} else {
		    blen = sprintf(before, "\\u%d", udata[uindex]);
		    alen = 0; after[0] = '\0';
		}
	    }
	    assert(tindex + multilen <= len2);
	    totallen = blen + alen;
	    for (i = 0; i < multilen; i++) {
		if (tdata[tindex+i] == '\\' ||
		    tdata[tindex+i] == '{' ||
		    tdata[tindex+i] == '}')
		    totallen += 2;
		else if (tdata[tindex+i] == 0x0D || tdata[tindex+i] == 0x0A)
		    totallen += 6;     /* \par\r\n */
		else if (tdata[tindex+i] > 0x7E || tdata[tindex+i] < 0x20)
		    totallen += 4;
		else
		    totallen++;
	    }

	    if (rtfsize < rtflen + totallen + 3) {
		rtfsize = rtflen + totallen + 512;
		rtf = sresize(rtf, rtfsize, char);
	    }

	    strcpy(rtf + rtflen, before); rtflen += blen;
	    for (i = 0; i < multilen; i++) {
		if (tdata[tindex+i] == '\\' ||
		    tdata[tindex+i] == '{' ||
		    tdata[tindex+i] == '}') {
		    rtf[rtflen++] = '\\';
		    rtf[rtflen++] = tdata[tindex+i];
		} else if (tdata[tindex+i] == 0x0D || tdata[tindex+i] == 0x0A) {
		    rtflen += sprintf(rtf+rtflen, "\\par\r\n");
		} else if (tdata[tindex+i] > 0x7E || tdata[tindex+i] < 0x20) {
		    rtflen += sprintf(rtf+rtflen, "\\'%02x", tdata[tindex+i]);
		} else {
		    rtf[rtflen++] = tdata[tindex+i];
		}
	    }
	    strcpy(rtf + rtflen, after); rtflen += alen;

	    tindex += multilen;
	    uindex++;
	}

        rtf[rtflen++] = '}';	       /* Terminate RTF stream */
        rtf[rtflen++] = '\0';
        rtf[rtflen++] = '\0';

	clipdata3 = GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE, rtflen);
	if (clipdata3 && (lock3 = GlobalLock(clipdata3)) != NULL) {
	    memcpy(lock3, rtf, rtflen);
	    GlobalUnlock(clipdata3);
	}
	sfree(rtf);
