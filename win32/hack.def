subcode:: WinMain_PreLoop
    $call init_url_hack

# === url hack ================================
subcode:: global
    $global int urlhack_cursor_is_hand=0
    $global extern int urlhack_current_region
    $global extern int urlhack_mouse_old_x, int urlhack_mouse_old_y
    $declare int urlhack_is_in_link_region(int x, int y);

# ----
subcode: init_url_hack
    $declare void urlhack_set_regular_expression(const char* expression);
    # url hack 
    $if term->cfg.url_defregex == 0
	urlhack_set_regular_expression(term->cfg.url_regex);

# ----
subcode:- main_on_WM_ALLKEY
    $if msg==WM_KEYDOWN
	$call on_url_ctrl_down
    $elif msg==WM_KEYUP
	$call on_url_ctrl_up

subcode: on_url_ctrl_down
    $local POINT pt
    $if wparam == VK_CONTROL && term->cfg.url_ctrl_click
	GetCursorPos(&pt);
	ScreenToClient(hwnd, &pt);
	$call get_chr_position, pt.x, pt.y

	$if urlhack_is_in_link_region(tn_chr_x, tn_chr_y)
	    SetCursor(LoadCursor(NULL, IDC_HAND));
	    term_update(term);

subcode: on_url_ctrl_up
    $if wparam == VK_CONTROL && term->cfg.url_ctrl_click
	SetCursor(LoadCursor(NULL, IDC_IBEAM));
	term_update(term);

# ----
subcode: main_on_WM_MOUSEMOVE
    $call on_mouse_pos
    $if urlhack_mouse_old_x!=tn_chr_x || urlhack_mouse_old_y!=tn_chr_y
	urlhack_mouse_old_x=tn_chr_x
	urlhack_mouse_old_y=tn_chr_y
	$if (!term->cfg.url_ctrl_click || is_ctrl_pressed()) && urlhack_is_in_link_region(tn_chr_x, tn_chr_y)
	    $if !urlhack_cursor_is_hand
		$call SetClassLong, IDC_HAND
		urlhack_cursor_is_hand=1
		term_update(term)
	$elif urlhack_cursor_is_hand
	    $call SetClassLong, IDC_IBEAM
	    urlhack_cursor_is_hand=0
	    term_update(term)
	$if urlhack_is_in_link_region(tn_chr_x, tn_chr_y) != urlhack_current_region
	    urlhack_current_region=urlhack_is_in_link_region(tn_chr_x, tn_chr_y)
	    term_update(term)

# -----------------------------------------------
subcode:: term_init
    $.url_update = 1
# term_data: term->url_update=1
# terminal.c do_paint
subcode: do_paint_urlhack_1
	int urlhack_underline_always = (term->cfg.url_underline == URLHACK_UNDERLINE_ALWAYS);

	int urlhack_underline =
		term->cfg.url_underline == URLHACK_UNDERLINE_ALWAYS ||
		(term->cfg.url_underline == URLHACK_UNDERLINE_HOVER && (!term->cfg.url_ctrl_click || urlhack_is_ctrl_pressed())) ? 1 : 0;

	int urlhack_is_link = 0, urlhack_hover_current = 0;
	int urlhack_toggle_x = term->cols, urlhack_toggle_y = term->rows;
	int urlhack_region_index = 0;
	text_region urlhack_region;

	if (term->url_update) {
		urlhack_reset();

		for (i = 0; i < term->rows; i++) {
			termline *lp = lineptr(term->disptop + i);

			for (j = 0; j < term->cols; j++) {
				urlhack_putchar((char)(lp->chars[j].chr & CHAR_MASK));
			}

			unlineptr(lp);
		}

		urlhack_go_find_me_some_hyperlinks(term->cols);
	}
	urlhack_region = urlhack_get_link_region(urlhack_region_index);
	urlhack_toggle_x = urlhack_region.x0;
	urlhack_toggle_y = urlhack_region.y0;

	if (urlhack_underline_always)
		urlhack_hover_current = 1;
	else
		urlhack_hover_current = urlhack_is_in_this_link_region(urlhack_region, urlhack_mouse_old_x, urlhack_mouse_old_y);

subcode: do_paint_urlhack_2
    # pos i, j
    if (urlhack_underline) {
	    if (j == urlhack_toggle_x && i == urlhack_toggle_y) {
		    urlhack_is_link = urlhack_is_link == 1 ? 0 : 1;

		    // Find next bound for the toggle
		    
		    if (urlhack_is_link == 1) {
			    urlhack_toggle_x = urlhack_region.x1;
			    urlhack_toggle_y = urlhack_region.y1;

			    if (urlhack_toggle_x == term->cols - 1) {
				    // Handle special case where link ends at the last char of the row
				    urlhack_toggle_y++;
				    urlhack_toggle_x = 0;
			    }
		    }
		    else {
			    urlhack_region = urlhack_get_link_region(++urlhack_region_index);

			    if (urlhack_underline_always)
				    urlhack_hover_current = 1;
			    else
				    urlhack_hover_current = urlhack_is_in_this_link_region(urlhack_region, urlhack_mouse_old_x, urlhack_mouse_old_y);

			    urlhack_toggle_x = urlhack_region.x0;
			    urlhack_toggle_y = urlhack_region.y0;
		    }
	    }

	    if (urlhack_is_link == 1 && urlhack_hover_current == 1) {	
		    tattr |= ATTR_UNDER;
	    }

	    term->url_update = 0;
    }

subcode: term_mouse_click_url_hack
    $if (!cfg.url_ctrl_click || (cfg.url_ctrl_click && urlhack_is_ctrl_pressed())) && urlhack_is_in_link_region(x, y) 
	    int i;
	    char *linkbuf = NULL;
	    text_region region = urlhack_get_link_bounds(x, y);

	    # p_line = lineptr(selpoint.y);
	    if (region.y0 == region.y1) {
		    linkbuf = snewn(region.x1 - region.x0 + 2, char);
		    
		    for (i = region.x0; i < region.x1; i++) {
			    linkbuf[i - region.x0] = (char)(p_line->chars[i].chr);
		    }

		    linkbuf[i - region.x0] = '\0';
	    }
	    else {
		    termline *urldata = scrlineptr(region.y0);
		    int linklen, row = region.y0;

		    linklen = (term->cols - region.x0) +
			    ((region.y1 - region.y0 - 1) * term->cols) + region.x1 + 1;

		    linkbuf = snewn(linklen, char);

		    for (i = region.x0; i < linklen + region.x0; i++) {
			    linkbuf[i - region.x0] = (char)(urldata->chars[i % term->cols].chr);
			    
			    // Jump to next line?
			    if (((i + 1) % term->cols) == 0) {
				    row++;
				    if (row >= term->rows)
					    break;
				    urldata = lineptr(row);
			    }
		    }

		    linkbuf[linklen - 1] = '\0';
		    unlineptr(urldata);
	    }
	    
	    urlhack_launch_url(!term->cfg.url_defbrowser ? term->cfg.url_browser : NULL, linkbuf);
	    
	    sfree(linkbuf);
