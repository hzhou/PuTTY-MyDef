include: win32/size.def
include: win32/color.def

fncode: WinMain
    $call @WinMain_Init
    $call @WinMain_PreWindow
    $call wc_cursor, IDC_IBEAM
    $call register_wndclass, "$(appname)", WndProc_main

    $global hwnd_main
    $call create_window_style
    $call cw_style, tn_ws
    $call cw_style_ex, tn_wsex
    $call cw_size, 10, 10, n_win_width, n_win_height
    $call create_window, hwnd_main, "$(appname)"

    $call @WinMain_PreShow
    $call show_window

    $call @WinMain_PreLoop
    $call win_loop

    finished:
    $call @WinMain_CleanUp

# --------------------------------------------------
subcode: assert_action
    $call msgbox, "Assert Error: $(check) @ line %d", __LINE__
    return 1

# --------------------------------------------------
subcode:: WinMain_Init
    $call init_config
    #$call init_console
    #$call winsock_init

subcode:: WinMain_PreShow
    $call init_terminal
    #$call init_size
    #$call init_caret
    #$call init_scrollbar

    #$call start_backend

    # setup line discipline
    #$call line_discipline_init
    # set state
    #must_close_session = FALSE;
    #session_closed = FALSE;

    #$call init_colors

subcode:: WinMain_PreLoop

subcode:: WinMain_CleanUp
    #$call cleanup_exit
# --------------------------------------------------

subcode: cleanup_exit
    $call @WinMain_CleanUp
     # Clean up.
    deinit_fonts();
    #$call winsock_cleanup
    #$call ssh_cleanup

    exit(0);

subcode: winsock_cleanup
    sk_cleanup();

subcode: ssh_cleanup
    random_save_seed();
    $(if:MSCRYPTOAPI)
	crypto_wrapup();

## -------------------------------------------------
subcode: pre_WndProc_main
    #$call dump_msg

subcode: create_window_style
    $call win_get_config, "scrollbar", tb_scrollbar, 1
    $call win_get_config, "noresize", tb_noresize, 0
    $call win_get_config, "alwaysontop", tb_alwaysontop, 0
    $call win_get_config, "sunken_edge", tb_sunken_edge, 0
    tn_ws= WS_OVERLAPPEDWINDOW | WS_VSCROLL
    tn_wsex = 0
    $if !tb_scrollbar
	tn_ws &= ~(WS_VSCROLL);
    $if tb_noresize
	tn_ws &= ~(WS_THICKFRAME | WS_MAXIMIZEBOX);
    $if tb_alwaysontop
	tn_wsex |= WS_EX_TOPMOST;
    $if tb_sunken_edge
	tn_wsex |= WS_EX_CLIENTEDGE;

subcode: init_caret
    $global HBITMAP caretbm
    tn_size = (font_width + 15) / 16 * 2 * font_height;
    $allocate(tn_size, 0) ts_bits
    caretbm = CreateBitmap(font_width, font_height, 1, 1, ts_bits);
    free(ts_bits);
    CreateCaret(hwnd_main, caretbm, font_width, font_height);

subcode: init_scrollbar
    $local SCROLLINFO si
    si.cbSize = sizeof(si);
    si.fMask = SIF_ALL | SIF_DISABLENOSCROLL;
    si.nMin = 0;
    si.nMax = n_rows - 1;
    si.nPage = n_rows;
    si.nPos = 0;
    SetScrollInfo(hwnd_main, SB_VERT, &si, FALSE);

subcode: show_window
    ShowWindow(hwnd_main, n_cmdshow);
    SetForegroundWindow(hwnd_main);
    $call term_focus, GetForegroundWindow() == hwnd_main
    UpdateWindow(hwnd_main);

subcode: init_transparency
    $call get_config, "transparency", tn_transparency, 0
    $if tn_transparency >= 50 && tn_transparency < 255
	MakeWindowTransparent(hwnd_main, tn_transparency)

# ---------------------
subcode: init_terminal
    $global TERM term
    term = term_init()
    $call term_size, 80, 25

subcode: start_backend
    back=backend_create_loop()
    $call assert, back
    ts_err = back->init(back)
    $if ts_err
	$local ts_msg_buf[1024]
	snprintf(ts_msg_buf, 1024, "Unable to open connection:\n%s", ts_err)
	MessageBox(NULL, ts_msg_buf, "$(appname) Error", MB_ICONERROR|MB_OK)
    back->size(back, n_rows, n_cols)

# ===============================================================

subcode: main_on_WM_PAINT
    $local PAINTSTRUCT ps
    $local HDC hdc
    HideCaret(hwnd);
    hdc = BeginPaint(hwnd, &ps);

    tn_chr_l=(ps.rcPaint.left-offset_width)/font_width
    tn_chr_r=(ps.rcPaint.right-offset_width-1)/font_width
    tn_chr_t=(ps.rcPaint.top-offset_height)/font_height
    tn_chr_b=(ps.rcPaint.bottom-offset_height-1)/font_height

    #term_invalidate_rect(term, tn_chr_l, tn_chr_t, tn_chr_r, tn_chr_b)

    $if ps.fErase || ps.rcPaint.left  < offset_width  || ps.rcPaint.top   < offset_height || ps.rcPaint.right >= offset_width + font_width*n_cols || ps.rcPaint.bottom>= offset_height + font_height*n_rows
	$call paint_background

    SelectObject(hdc, GetStockObject(SYSTEM_FONT));
    SelectObject(hdc, GetStockObject(WHITE_PEN));
    EndPaint(hwnd, &ps);
    ShowCaret(hwnd);
    return 0;

subcode: paint_background
    $call quick_brush, colours[COLOR_DEFBG]
    $call quick_pen, colours[COLOR_DEFBG]
    IntersectClipRect(hdc, ps.rcPaint.left, ps.rcPaint.top, ps.rcPaint.right, ps.rcPaint.bottom); 
    ExcludeClipRect(hdc, offset_width, offset_height, offset_width+font_width*n_cols, offset_height+font_height*n_rows);
    Rectangle(hdc, ps.rcPaint.left, ps.rcPaint.top, ps.rcPaint.right, ps.rcPaint.bottom);


