include: win32/size.def
include: win32/color.def

include: win32/winsock.def

fncode: WinMain
    $call debug_on
    $call @WinMain_Init
    $call @win_init
    $call wc_cursor, IDC_IBEAM
    $call register_wndclass, "$(appname)", WndProc_main

    $call init_win_size

    tn_ws= WS_OVERLAPPEDWINDOW 
    tn_wsex = 0
    $call @on_window_style
    $call cw_style, tn_ws
    $call cw_style_ex, tn_wsex
    $call cw_size, 10, 10, n_win_width, n_win_height
    $call create_window, hwnd_main, "$(appname)"

    init_fonts(0,0)
    $call adjust_win_size

    print "WinMain_PreShow\n"
    $call @WinMain_PreShow
    print "ShowWindow\n"
    ShowWindow(hwnd_main, n_cmdshow);
    $call @init_focus
    UpdateWindow(hwnd_main);

    print "WinMain_PreLoop\n"
    $call @WinMain_PreLoop
    $call win_loop

    finished:
    $call @WinMain_CleanUp

# --------------------------------------------------
subcode:: WinMain_Init
    $call init_config
    $call winsock_init

subcode:: win_init
    $call win_get_config, "rows", n_rows, 25
    $call win_get_config, "cols", n_cols, 80
    $call init_colors

subcode:: WinMain_PreShow
    print "init_terminal\n"
    $call init_terminal
    #$call init_size

    print "start_backend\n"
    $call start_backend
    print "line_discipline_init\n"
    $call @line_discipline_init

    # set state
    #must_close_session = FALSE;
    #session_closed = FALSE;

subcode:: WinMain_PreLoop

subcode:: WinMain_CleanUp
     # Clean up.
    deinit_fonts();
    $call winsock_cleanup
    #$call ssh_cleanup

    exit(0);

# ----
# ----
subcode: ssh_cleanup
    random_save_seed();
    $(if:MSCRYPTOAPI)
	crypto_wrapup();

## -------------------------------------------------
# ---------------------
subcode: init_terminal
    $global TERM term
    term = term_init()
    term_size(term, n_rows, n_cols)

subcode: start_backend
    $global struct backend * back
    $declare struct backend * backend_create_telnet()
    print "backend_create_telnet\n"
    back=backend_create_telnet()
    $call assert, back
    print "back->init\n"
    ts_err = back->init(back)
    $if ts_err
	$local ts_msg_buf[1024]
	snprintf(ts_msg_buf, 1024, "Unable to open connection:\n%s", ts_err)
	MessageBox(NULL, ts_msg_buf, "$(appname) Error", MB_ICONERROR|MB_OK)
    print "back->size\n"
    # back->size(back, n_rows, n_cols)

# ===============================================================

subcode: main_on_WM_PAINT
    $local PAINTSTRUCT ps
    $local HDC hdc
    #HideCaret(hwnd);
    hdc = BeginPaint(hwnd, &ps);
    term_notify(term, "paint")
    $call paint_background
    EndPaint(hwnd, &ps);
    #ShowCaret(hwnd);
    return 0;

subcode: paint_background
    $call quick_brush, colours[COLOR_DEFBG]
    $call quick_pen, colours[COLOR_DEFBG]
    IntersectClipRect(hdc, ps.rcPaint.left, ps.rcPaint.top, ps.rcPaint.right, ps.rcPaint.bottom); 
    ExcludeClipRect(hdc, offset_width, offset_height, offset_width+font_width*n_cols, offset_height+font_height*n_rows);
    Rectangle(hdc, ps.rcPaint.left, ps.rcPaint.top, ps.rcPaint.right, ps.rcPaint.bottom);

    SelectObject(hdc, GetStockObject(SYSTEM_FONT));
    SelectObject(hdc, GetStockObject(WHITE_PEN));

# ---------------------------------
subcode: main_on_WM_CHAR
    term_notify(term, "key")
    $call debug, "WM_CHAR %x - %x\n", wparam, lparam
    #linedisc_send_codepage(CP_ACP, (unsigned char *)&wparam, 1)
    linedisc_send((char*)&wparam, 1)

# ===========================================================
# -- focus 
subcode:: global
    $global b_has_focus=0

subcode: init_focus
    SetForegroundWindow(hwnd_main);
    $if GetForegroundWindow() == hwnd_main
	b_has_focus=1

subcode:: main_on_WM_SETFOCUS
    b_has_focus=1
    term_update(term);

subcode:: main_on_WM_KILLFOCUS
    b_has_focus=0
    term_update(term);

# -- scrollbar
subcode:: win_init
    $call win_get_config, "scrollbar", tb_scrollbar, 1

subcode:: on_window_style
    $if tb_scrollbar
	tn_ws |= WS_VSCROLL

subcode:: WinMain_PreShow
    $call init_scrollbar

subcode: init_scrollbar
    $call set_scrollbar, n_rows, 0, n_rows

subcode: set_scrollbar(total, pos, page)
    $local SCROLLINFO si
    si.cbSize = sizeof(si);
    si.fMask = SIF_ALL | SIF_DISABLENOSCROLL;
    si.nMin = 0
    si.nMax = $(total) - 1
    si.nPage = $(page)
    si.nPos = $(pos)
    SetScrollInfo(hwnd_main, SB_VERT, &si, TRUE);

# -- other
subcode:: win_init
    $call win_get_config, "noresize", tb_noresize, 0
    $call win_get_config, "alwaysontop", tb_alwaysontop, 0
    $call win_get_config, "sunken_edge", tb_sunken_edge, 0

subcode:: on_window_style
    $if tb_noresize
	tn_ws &= ~(WS_THICKFRAME | WS_MAXIMIZEBOX);
    $if tb_alwaysontop
	tn_wsex |= WS_EX_TOPMOST;
    $if tb_sunken_edge
	tn_wsex |= WS_EX_CLIENTEDGE;
