
subcode:: global
    $call slist_declare, beep | b_overloaded, n_last_tick | unsigned long n_ticks
    $global struct beep_list sl_beep

subcode:: term_initialize
    $call slist_init, sl_beep, b_overloaded=0

subcode: term_on_key_event
    sl_beep.b_overloaded=0
    $call slist_clear, sl_beep

subcode: term_do_BEL
    $call seen_disp_event

    $local unsigned long tn_ticks
    tn_ticks = GETTICKCOUNT();

    $if !sl_beep.b_overloaded
	$call slist_push, sl_beep, n_ticks=tn_ticks

    $while sl_beep.head && sl_beep.head->n_ticks < tn_ticks - 2*TICKSPERSEC
	$call slist_shift, sl_beep
	free($(p))

    $if sl_beep.b_overloaded && tn_ticks - sl_beep.n_last_tick >= 5*TICKSPERSEC
	sl_beep.b_overloaded = 0
    $elif !sl_beep.b_overloaded && sl_beep.n >= 5
	sl_beep.b_overloaded = 1
    sl_beep.n_last_tick = tn_ticks

    $if !sl_beep.b_overloaded
	$declare void do_beep();
	do_beep();
	$if cfg.beep == BELL_VISUAL
	    $call term_start_vbell

