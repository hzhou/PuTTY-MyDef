subcode:: function_list
    $list check_boundary, resizeline
    $list termchars_equal_override, termchars_equal
    $list copy_termchar, move_termchar
    $list find_last_nonempty_line

# ---- termline ----------------------------------
subcode: newline(n, char)
    $define(LATTR_NORM) 0
    $define(LATTR_WRAPPED)  0x10
    $define(LATTR_WRAPPED2) 0x20
    $local termline * p_line;
    $allocate p_line
    $allocate($(n)) p_line->chars
    $for j=0:$(n)
	p_line->chars[j] = $(char)
    p_line->cols = p_line->size = $(n)
    p_line->lattr = LATTR_NORM

subcode: freeline(p_line)
    $if $(p_line)
	free($(p_line)->chars)
	free($(p_line))

fncode: resizeline(Terminal *term, termline *p_line, tn_cols)
    $if p_line->size < tn_cols
	# -- expand --------
	p_line->size = tn_cols
	$call p_line_resize
	$for i=p_line->cols:p_line->size
	    p_line->chars[i] = $.basic_erase_char;

    $elif p_line->size > tn_cols
	# $call p_line_resize

    p_line->cols = tn_cols

sucode: p_line_resize
    p_line->chars=(termchar *)realloc(p_line->chars, p_line->size*sizeof(termchar))

# -- remove ucswide char at x, y
# --     clear LATTR_WRAPPED2?
fncode: check_boundary(Terminal *term, int x, int y)
    $local termline * p_line
    $if x == 0 || x > $.cols
	return;
    $call get_screen_line, y, p_line
    $if x == $.cols
	p_line->lattr &= ~LATTR_WRAPPED2;
    $elif p_line->chars[x].chr == UCSWIDE
	p_line->chars[x-1].chr = ' ' | CSET_ASCII;
	p_line->chars[x] = p_line->chars[x-1];

# ---- Termchar  ----------------------------
subcode: cmp_chr(a, b)
    $if $(a) != $(b)
	return 0
subcode: cmp_attr(a, b)
    $if ($(a) &~ DATTR_MASK) != ($(b) &~ DATTR_MASK)
	return 0

fncode: termchars_equal_override(termchar *a, termchar *b, unsigned long bchr, unsigned long battr)
    $call cmp_chr, a->chr, bchr
    $call cmp_attr, a->attr, battr
    return 1

fncode: termchars_equal(termchar *a, termchar *b)
    $call cmp_chr, a->chr, b->chr
    $call cmp_attr, a->attr, b->attr
    return 1

# ----------
fncode: copy_termchar(termline *p_line, int x, termchar *p_char)
    p_line->chars[x] = *p_char

subcode: erase_termchar(x)
    p_line->chars[$(x)] = $.erase_char

subcode: set_termchar(p_line, x, c)
    $(p_line)->chars[$(x)].chr = $(c)
    $(p_line)->chars[$(x)].attr = $.attr

# Move a character cell within its termline. 
fncode: move_termchar(termline *p_line, termchar *dest, termchar *src)
    *dest = *src

# ---- Erase Char -----------------------------------
subcode:: on_term_init
    $map term_decl, termchar basic_erase_char, termchar erase_char
    $.basic_erase_char.chr = CSET_ASCII | ' ';
    $.basic_erase_char.attr = ATTR_DEFAULT;
    $.erase_char = $.basic_erase_char;

subcode:: power_on
    $.erase_char = $.basic_erase_char;

# ---- Clear Screen--------------------------------------------
subcode: erase_screen(mode)
    $if $(mode)==0
	$call erase_screen_0
    $elif $(mode)==1
	$call erase_screen_1
    $elif $(mode)==2
	$call erase_screen_2
    $elif $(mode)==3
	$call erase_screen_3

# ----
subcode: erase_line(mode)
    $if $(mode)==0
	$call erase_line_0
    $elif $(mode)==1
	$call erase_line_1
    $elif $(mode)==2
	$call erase_line_2, $.curs.y

# ----
subcode: erase_screen_0
    $.disptop=0
    $for i=$.curs.y+1:$.rows
	$call erase_line_2, i
    $call erase_line_0

subcode: erase_screen_1
    $.disptop=0
    term_invalidate(term);
    $for i=0:$.curs.y
	$call erase_line_2, i
    $call erase_line_1

subcode: erase_screen_2
    $.disptop=0
    term_invalidate(term);
    tn_count=find_last_nonempty_line(term, $.screen)+1
    $for i=0:tn_count
	$call scroll_down_one

subcode: erase_screen_3
    $.disptop=0
    term_invalidate(term);
    $for i=0:$.rows
	$call erase_line_2, i
    $call scrollback_shrink_to, 0
    $call update_sbar
# ----
subcode: erase_line_0
    check_boundary(term, $.curs.x, $.curs.y)
    $call get_screen_line, $.curs.y, p_line
    p_line->lattr &= ~(LATTR_WRAPPED | LATTR_WRAPPED2);
    $for j=$.curs.x:$.cols
	$call erase_termchar, j

subcode: erase_line_1
    check_boundary(term, $.curs.x, $.curs.y)
    $call get_screen_line, $.curs.y, p_line
    p_line->lattr = LATTR_NORM;
    $for j=0:$.curs.x+1
	$call erase_termchar, j

subcode: erase_line_2(i)
    $call get_screen_line, $(i), p_line
    $call blank_line
# ----
subcode: blank_line
    p_line->lattr = LATTR_NORM;
    $for j=0:$.cols
	$call erase_termchar, j

######################################################
fncode: find_last_nonempty_line(Terminal *term, struct clist * screen)
    n=screen->n_count
    $for i=n-1:-1:-1
	$call clist_index, screen, i, p_line
	$for j=0:p_line->cols
	    $if !termchars_equal(&p_line->chars[j], &$.erase_char)
		return i
    return 0

