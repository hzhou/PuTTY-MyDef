include: term/compressline.def

subcode:: function_list
    $list term_set_scrollback_size, term_clrsb
    $list lineptr, unlineptr

subcode:: on_term_finish
    &call clist_free, $.screen, p_line
	$call freeline, p_line

# ============================================================
fncode: term_set_scrollback_size(Terminal * term, n_save)
    $call scrollback_resize, n_save

subcode:: on_term_init
    $map term_decl, struct clist * p_scrollback, n_scrollback_count, n_scrollback_size
    $.p_scrollback=NULL
    $.n_scrollback_count = 0;
    $call scrollback_resize, 100

subcode:: on_term_finish
    &call clist_free, $.p_scrollback, ts_line
	free(ts_line)

# ----
subcode: scrollback_resize(n)
    $if !$.p_scrollback
	$call clist_create, $.p_scrollback
	$.n_scrollback_count=0
    $.n_scrollback_size=$(n)
    $call clist_expand, $.p_scrollback, $(n)
    $call scrollback_shrink_to, $.n_scrollback_size

# ----
subcode: scrollback_shrink_to(n)
    $if $.n_scrollback_count>$(n)
	tn_shrink=$.n_scrollback_count-$(n)
	$for i=0:tn_shrink
	    $call clist_shift, $.p_scrollback, ts_line
	    $.n_scrollback_count--
	    free(ts_line)

subcode: scrollback_push(line)
    $call scrollback_shrink_to, $.n_scrollback_size-1
    $dump(scrollback_shrink_to) $.n_scrollback_size, $.n_scrollback_count
    ts_line=compressline($(line))
    $call clist_push, $.p_scrollback, ts_line
    $.n_scrollback_count++

subcode: scrollback_pop(line)
    $call clist_pop, $.p_scrollback, ts_line
    $(line)=decompressline(ts_line)
    free(ts_line)
    $.n_scrollback_count--

# ----------------------------------------
subcode: get_scrollback_top(var)
    $(var)=-$.n_scrollback_count

fncode: term_clrsb(Terminal *term)
    $call scrollback_shrink_to, 0
    $.alt_sblines=0
# ----------------------------------------------------------------
subcode: get_screen_line(y, p_line)
    $call clist_index, $.screen, $(y), $(p_line)

fncode: lineptr(Terminal *term, int y)
    $return_type termline * 
    $local termline *p_line
    $struct(termline) b_temporary
    $local struct clist * whichtree

    $if y >= 0
	tn_idx = y;
	$call clist_index, $.screen, tn_idx, p_line
	p_line->b_temporary=0
    $else
	tn_idx = y + $.p_scrollback->n_count
	$call clist_index, $.p_scrollback, tn_idx, ts_line
	p_line = decompressline(ts_line)
	p_line->b_temporary=1
    resizeline(term, p_line, $.cols);
    return p_line;

fncode: unlineptr(termline * p_line)
    $if p_line->b_temporary
	$call freeline, p_line
# ----------------------------------------------------------------
# scroll up one, selection goes down one 
subcode: scroll_up_one
    $local termline * p_line
    $call clist_pop, $.screen, p_line
    resizeline(term, p_line, $.cols);
    $call blank_line
    $call clist_unshift, $.screen, p_line

    $call @scroll_selection_down_one

# scroll down one, selection goes up one 
subcode: scroll_down_one
    $local termline * p_line
    $call clist_shift, $.screen, p_line
    $if $.n_scrollback_size > 0
	$call scrollback_push, p_line
	$if $.disptop > -$.n_scrollback_size && $.disptop < 0
	    $.disptop--
    resizeline(term, p_line, $.cols);
    $call blank_line
    $call clist_push, $.screen, p_line

    $call @scroll_selection_up_one, -$.n_scrollback_size

# ----------------------------------------------------------------------
subcode:: function_list
    $list term_scroll

subcode: check_bound(var, top, bot)
    $if $(var) < $(top)
	$(var) = $(top)
    $if $(var) > $(bot)
	$(var) = $(bot)

fncode: term_scroll(Terminal *term, tn_rel, tn_off)
    $if tn_rel<0
	$.disptop= tn_off
    $elif tn_rel>0
	$.disptop= tn_off - $.n_scrollback_count
    $elif tn_rel==0
	$.disptop += tn_off
    tn_sbtop=-$.n_scrollback_count
    $call check_bound, $.disptop, tn_sbtop, 0
    $call update_sbar
    term_update(term);

fncode: term_scroll_to_selection(Terminal *term, tb_which_end )
    $if $.selstate != SELECTED
	return;
    $if tb_which_end
	tn_y = $.selend.y-$.rows/2
    $else
	tn_y = $.selstart.y-$.rows/2

    tn_sbtop = -$.n_scrollback_count
    $call check_bound, tn_y, tn_sbtop, 0
    term_scroll(term, -1, tn_y);


