# -------------- term actions ------------------------------------------
subcode:: on_term_init
    $map term_decl, char id_string[1024]
    strcpy($.id_string, "\033[?6c");

subcode: term_ans_type
    linedisc_send($.id_string, strlen($.id_string))

subcode: term_do_DA
    $call term_ans_type
subcode: term_do_DSR
    $local ts_temp_buf[100]
    $if $.pn_esc_args[0]==6
	n=snprintf(ts_temp_buf, 100, "\033[%d;%dR", $.curs.y + 1, $.curs.x + 1)
	linedisc_send(ts_temp_buf, n)
    $else
	linedisc_send("\033[0n", 4)

# ---- Single Char Control --------------
subcode: term_do_ENQ
    $call term_ans_type

subcode: term_do_S1
    $.cset=1

subcode: term_do_S0
    $.cset=0

subcode:: on_term_init
    $call term_get_config, "no_dbackspace", b_no_dbackspace, 1

subcode: term_do_DEL
    $if $.curs.x && !$.wrapnext
	$.curs.x--;
    $.wrapnext = FALSE;
    $if !$.b_no_dbackspace
	check_boundary(term, $.curs.x, $.curs.y);
	check_boundary(term, $.curs.x+1, $.curs.y);
	$call get_screen_line, $.curs.y, p_line
	$call erase_termchar, $.curs.x

subcode: term_do_BS
    $call seen_disp_event
    $if $.curs.x == 0 && $.curs.y == 0
	# /* do nothing */
    $elif $.curs.x == 0 && $.curs.y > 0
	$.curs.x = $.cols - 1
	$.curs.y--;
    $elif $.wrapnext
	$.wrapnext = FALSE;
    $else
	$.curs.x--;

subcode: term_do_HT
    $call seen_disp_event
    pos old_curs = $.curs;
    $call get_screen_line, $.curs.y, p_line
    $dowhile $.curs.x<$.cols-1 && !$.pc_tabs[$.curs.x]
	$.curs.x++;
    $if (p_line->lattr & LATTR_MODE) != LATTR_NORM
	$if $.curs.x >= $.cols / 2
	    $.curs.x = $.cols / 2 - 1;
    $else
	$if $.curs.x >= $.cols
	    $.curs.x = $.cols - 1;
    $call @check_deselect(old_curs, $.curs)

subcode: term_do_LF_only
    $if $.curs.y == $.rows - 1
	$call scroll_down_one
    $elif $.curs.y < $.rows - 1
	$.curs.y++
    $.wrapnext = FALSE;

subcode: term_do_CR_only
    $.curs.x = 0;
    $.wrapnext = FALSE;

subcode: term_do_CR
    $call seen_disp_event
    $call term_do_CR_only
    $call @term_out_log_traffic

subcode: term_do_LF
    $call seen_disp_event
    $call term_do_LF_only
    $call @term_out_log_traffic

subcode: term_do_FF
    $call term_do_LF

subcode: term_do_VT
    $call term_do_LF

# ---- Escape Sequence ----------------------------------------
subcode: term_do_DECSC
    $call save_cursor
subcode: term_do_DECRC
    $call seen_disp_event
    $call restore_cursor
subcode: term_do_IND
    $call seen_disp_event
    $call term_do_LF_only
subcode: term_do_NEL
    $call seen_disp_event
    $call term_do_LF_only
    $call term_do_CR_only
subcode: term_do_DECID
    $call term_ans_type

subcode: term_do_HTS
    $.pc_tabs[$.curs.x]=1
subcode: term_do_TBC
    $if $.pn_esc_args[0]==0
	$.pc_tabs[$.curs.x]=0
    $elif $.pn_esc_args[0]==3
	$for i=0:$.cols
	    $.pc_tabs[i]=0

subcode: term_do_DECALN
    # Fill screen with 'E'
    $.erase_char.chr=CSET_ASCII | 'E'
    $call erase_screen_2
    $.erase_char.chr=CSET_ASCII | ' '
    $call seen_disp_event

    $local pos srctop
    $local pos srcbot
    srctop.x = 0
    srctop.y = 0
    srcbot.x = 0
    srcbot.y = $.rows
    $call check_deselect(srctop, srcbot)

# ---- Cursor Movement ----------------------------------------
subcode: term_do_CUU
    $call term_ESC_default, 1
    move_cursor(term, $.curs.x, $.curs.y - $.pn_esc_args[0], 1);
    $call seen_disp_event
subcode: term_do_CUD
    $call term_ESC_default, 1
    move_cursor(term, $.curs.x, $.curs.y + $.pn_esc_args[0], 1);
    $call seen_disp_event
subcode: term_do_CUF
    $call term_ESC_default, 1
    move_cursor(term, $.curs.x + $.pn_esc_args[0], $.curs.y, 1);
    $call seen_disp_event
subcode: term_do_CUB
    $call term_ESC_default, 1
    move_cursor(term, $.curs.x - $.pn_esc_args[0], $.curs.y, 1);
    $call seen_disp_event
subcode: term_do_CNL
    $call term_ESC_default, 1
    move_cursor(term, 0, $.curs.y + $.pn_esc_args[0], 1);
    $call seen_disp_event
subcode: term_do_CPL
    $call term_ESC_default, 1
    move_cursor(term, 0, $.curs.y - $.pn_esc_args[0], 1);
    $call seen_disp_event
subcode: term_do_CHA
    $call term_ESC_default, 1
    move_cursor(term, $.pn_esc_args[0] - 1, $.curs.y, 0);
    $call seen_disp_event
# ----
subcode: term_do_VPA
    $call term_ESC_default, 1
    move_cursor(term, $.curs.x, ( $.pn_esc_args[0] - 1), 0)
    $call seen_disp_event
subcode: term_do_CUP
    $call term_ESC_default_2, 1, 1
    move_cursor(term, $.pn_esc_args[1]-1, $.pn_esc_args[0]-1,  0)
    $call seen_disp_event
subcode: term_do_HVP
    $call term_do_CUP

subcode: term_do_ED
    $call term_ESC_default, 0
    n = $.pn_esc_args[0]
    $dump(term_do_ED) n
    $call erase_screen, n
    $call seen_disp_event

subcode: term_do_EL
    $call term_ESC_default, 0
    n = $.pn_esc_args[0]
    $call erase_line, n
    $call seen_disp_event

subcode: term_do_DECSTBM
    # set margin, do not support

# ---- Mode -----------------------------------
subcode: term_decl_0(var)
    $struct(tagTerminal) $(var)
    $(this)$(var) = 0

subcode:: on_term_init
    $map term_decl_0 b_insert, b_echo, b_crlf, b_big_cursor
    $map term_decl_0 b_app_cursor_keys, b_rvideo, b_cursor_on

subcode:: function_list
    $list term_app_cursor_keys

fncode: term_app_cursor_keys(Terminal *term)
    return $.b_app_cursor_keys

# ---- ----
subcode: term_do_MODE_HIGH_0
    $call term_do_toggle, 0, 1, 0
subcode: term_do_MODE_LOW_0
    $call term_do_toggle, 0, 0, 1
subcode: term_do_MODE_HIGH_1
    $call term_do_toggle, 1, 1, 0
subcode: term_do_MODE_LOW_1
    $call term_do_toggle, 1, 0, 1

subcode: term_do_toggle(query, state0, state1)
    $(set:arg=$(this)pn_esc_args[i])
    $for i=0:$.n_esc_args
	tn_arg=$(arg)
	$call term_do_toggle_$(query)

subcode: term_do_toggle_0
    $if $(arg)==4
	$.b_insert=$(state0)
    $elif $(arg)==12
	$.b_echo=$(state1)
    $elif $(arg)==20
	$.b_crlf=$(state0)
    $elif $(arg)==34
	$.b_big_cursor=$(state1)

subcode: term_do_toggle_1
    $if $(arg)==1
	$.b_app_cursor_keys=$(state0)
    $elif $(arg)==5
	$.b_rvideo=$(state0)
    $elif $(arg)==12
	# blink cursor
    $elif $(arg)==25
	$.b_cursor_on=$(state0)
    $elif $(arg)==47
	# alt screen
    $elif $(arg)==1049
	# save cursor and alt_screen
# ------------------------------------------------------------------------
subcode: term_do_SGR
    $if $.n_esc_args==0
	$.n_esc_args=1
    $for i = 0:$.n_esc_args
	n=$.pn_esc_args[i]
	$if n>=30 && n<38
	    $call set_attr_fg, $.attr, n-30
	$elif n==39
	    $call set_attr_fg, $.attr, COLOR_DEFFG
	$elif n>=40 && n<48
	    $call set_attr_bg, $.attr, n-40
	$elif n==49
	    $call set_attr_bg, $.attr, COLOR_DEFBG
	$elif n==38 || n==48
	    $if $.n_esc_args>2
		$call set_color_256
	    i=$.n_esc_args
	$call switch_m_reset, 0
	$call switch_m_enable, 1, BOLD
	$call switch_m_enable, 4, UNDER
	$call switch_m_enable, 5, BLINK
	$call switch_m_enable, 7, REVERSE
	$call switch_m_disable, 22, BOLD
	$call switch_m_disable, 24, UNDER
	$call switch_m_disable, 25, BLINK
	$call switch_m_disable, 27, REVERSE
    $call @on_term_attr
# ----
subcode: switch_m_reset(n)
    $elif n==$(n)
	$.attr = $.default_attr
subcode: switch_m_enable(n, attr)
    $elif n==$(n)
	$.attr |= ATTR_$(attr)
subcode: switch_m_disable(n, attr)
    $elif n==$(n)
	$.attr &= ~ATTR_$(attr)
# ----
subcode: set_color_256
    $if $.pn_esc_args[i+1]==5
	$if n==38
	    $call set_attr_fg, $.attr, $.pn_esc_args[i+2] & 0xFF
	$else
	    $call set_attr_bg, $.attr, $.pn_esc_args[i+2] & 0xFF
    $elif $.pn_esc_args[i+1]==2 && $.n_esc_args>5
	$call match_color_216, $.pn_esc_args[i+2]&0xff, $.pn_esc_args[i+3]&0xff, $.pn_esc_args[i+4]&0xff, tn_color_idx
	$if n==38
	    $call set_attr_fg, $.attr, tn_color_idx
	$else
	    $call set_attr_bg, $.attr, tn_color_idx

subcode: match_color_216(r, g, b, n)
    $call match_color_6, $(r), tn_r
    $call match_color_6, $(g), tn_g
    $call match_color_6, $(b), tn_b
    $(n)=tn_r*36+tn_g*6+tn_b

subcode: match_color_6(r, n)
    $(n)=(($(r))-55+20)/40
    $if $(n)<0
	$(n)=0
    $if $(n)>5
	$(n)=5

# ----
