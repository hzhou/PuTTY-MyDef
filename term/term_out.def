include: term/to_action.def
include: term/to_utf.def
include: term/to_beep.def
#include: term/to_print.def
include: term/to_csi.def
include: term/to_osc.def
#include: term/to_log.def

# #### term in ##############################################
subcode: do_term_data(data, len)
    $if !$.b_in_term_out && $.selstate != DRAGGING
	$.b_in_term_out = TRUE;
	term_out(term)
	$.b_in_term_out = FALSE;

# #### term out ##############################################
subcode:: on_term_init
    $map term_decl, n_termstate
    $map term_decl, n_state_2
    $.n_termstate = termstate_TOPLEVEL;
    $enumbase(termstate) TOPLEVEL, SEEN_ESC, SEEN_CSI, SEEN_OSC, SEEN_QUERY, DO_CTRLS, PRINTING
    # $define(TM_PUTTY) 0xFFFF
    # $.compatibility_level = TM_PUTTY;

subcode:: function_list
    $list term_out

fncode: term_out(Terminal *term)
    $call @term_out_global
    $local int c
    &call bufchain_char_loop, $.inbuf, c
	# printf("termstate=%d, c=%x [%c]\n", $.n_termstate, c, (char)c);
	$call @term_out_pre  # Specific feature
	$call @term_out_pre2 # General feature
	$if $.n_termstate == termstate_TOPLEVEL
	    $call @term_out_filter
	    $call term_do_CHAR
	$else
	    $.n_termstate = termstate_TOPLEVEL
	$call @term_out_after
    $call @term_out_flush

# ----------------------------
subcode:: term_out_pre
    $call @term_out_check_C1_control
    $if (c&~0x1F)== 0||c=='\177' && $.n_termstate < termstate_DO_CTRLS
	$call term_out_C0_Control

subcode: term_out_pre2
    $if c=='\033'
	$.n_termstate = termstate_SEEN_ESC
    $elif $.n_termstate==termstate_SEEN_ESC
	$call term_out_SEEN_ESC
    $elif $.n_termstate==termstate_SEEN_CSI
	$call term_out_SEEN_CSI
    $elif $.n_termstate==termstate_SEEN_OSC
	$call term_out_SEEN_OSC

subcode:: term_out_after
    $call @check_deselect_curs

# ---- Char Out ----------------------------------------
subcode: term_do_CHAR
    $call debug, "term_do_CHAR (%d, %d) %x\n", $.curs.x, $.curs.y, c
    $call get_screen_line, $.curs.y, p_line
    $call term_char_get_width, c

    $call @term_out_check_wrap_mode
    $if $.wrapnext && tn_width > 0 
	$call term_out_wrap
    $call @term_out_check_insert_mode

    $if tn_width>0
	$if tn_width==2
	    $call term_char_out_wide
	$elif tn_width==1  
	    $call term_char_out_single
	$.curs.x++
	$call term_out_check_wrapnext
    $else
	$call term_char_out_cc

    $call seen_disp_event

subcode: term_char_get_width(c)
    $if DIRECT_CHAR($(c))
	tn_width = 1
    $else
	$declare int mk_wcwidth(int)
	tn_width = mk_wcwidth($(c))

subcode: term_char_out_single
    $call term_char_out_clear_ucswide, $.curs.x
    $call term_char_out_clear_ucswide, $.curs.x+1
    $call set_termchar, p_line, $.curs.x, c

subcode: term_char_out_wide
    $call term_char_out_clear_ucswide, $.curs.x
    $call term_char_out_clear_ucswide, $.curs.x+2
    $if $.curs.x == $.cols-1
	$call erase_termchar, $.curs.x
	p_line->lattr |= LATTR_WRAPPED2
	$call term_out_wrap
	$call term_char_out_clear_ucswide, $.curs.x+2
    $call set_termchar, p_line, $.curs.x, c
    $.curs.x++
    $call set_termchar, p_line, $.curs.x, UCSWIDE

# Combining characters
# There appears to be limited cases for this
# Rather than adding 50% more complexity, maybe we could simply 
#   utilize a few bits in attributes?
subcode: term_char_out_cc
    $if $.curs.x > 0
	tn_x = $.curs.x - 1;
	$if $.wrapnext
	    tn_x++
	$if p_line->chars[tn_x].chr == UCSWIDE
	    $call assert, tn_x>0
	    tn_x--;
	#add_cc(p_line, tn_x, c);
	# or add attribute flag

# ----
subcode: term_char_out_clear_ucswide(x)
    $if $(x)>0 && $(x)<$.cols
	$if p_line->chars[$(x)].chr == UCSWIDE
	    p_line->chars[$(x)-1].chr = ' ' | CSET_ASCII;
	    p_line->chars[$(x)] = p_line->chars[$(x)-1];

subcode: term_out_check_wrapnext
    $if $.curs.x == $.cols
	$.curs.x--;
	$.wrapnext = 1

subcode: term_out_wrap
    p_line->lattr |= LATTR_WRAPPED
    $call term_do_LF_only
    $call term_do_CR_only
    $.wrapnext = 0
    $call get_screen_line, $.curs.y, p_line

subcode: term_do_LF_only
    $if $.curs.y == $.rows - 1
	$call scroll_down_one
    $elif $.curs.y < $.rows - 1
	$.curs.y++
    $.wrapnext = FALSE;

subcode: term_do_CR_only
    $.curs.x = 0;
    $.wrapnext = FALSE;

# ----------------------------
subcode: switch_c(case, name)
    case $(case):
	$call term_do_$(name)
	break;

subcode: term_out_C0_Control
    $switch c
	$call switch_c, '\177', DEL
	$call switch_c, '\005', ENQ
	$call switch_c, '\007', BEL
	$call switch_c, '\010', BS
	$call switch_c, '\011', HT
	$call switch_c, '\012', LF
	$call switch_c, '\013', VT
	$call switch_c, '\014', FF
	$call switch_c, '\015', CR
	$call switch_c, '\016', S1
	$call switch_c, '\017', S0
	case '\033':
	default:
	    $.n_termstate = termstate_TOPLEVEL
	    break;
# ----------------------------------------------------------------
subcode:: on_term_init
    $define(ARGS_MAX) 32
    $map term_decl, n_esc_args, pn_esc_args[ARGS_MAX]
    $.n_esc_args=0

subcode: term_ESC_default(n)
    $if !$.pn_esc_args[0]
	$.pn_esc_args[0]=$(n)

subcode: term_ESC_default_2(n1, n2)
    $if !$.pn_esc_args[0]
	$.pn_esc_args[0]=$(n1)
    $if !$.pn_esc_args[1]
	$.pn_esc_args[1]=$(n2)

subcode: term_out_SEEN_ESC
    $.n_termstate = termstate_TOPLEVEL
    $if c >= ' ' && c <= '/'
	$.n_state_2=c
	$.n_termstate = termstate_SEEN_QUERY
    $elif c=='['
	$call term_out_start_CSI
    $elif c==']'
	$call term_out_start_OSC
    $else
	$switch c
	    $call switch_c, '7', DECSC
	    $call switch_c, '8', DECRC
	    # $call switch_c, '=', DECKPAM
	    # $call switch_c, '>', DECKPNM
	    $call switch_c, 'D', IND
	    $call switch_c, 'E', NEL
	    #$call switch_c, 'M', RI
	    $call switch_c, 'Z', DECID
	    #$call switch_c, 'c', RIS
	    $call switch_c, 'H', HTS

# --------------------------------------------------------------
subcode: term_out_SEEN_QUERY
    $.n_termstate = termstate_TOPLEVEL
    $if $.n_state_2 == ' '
	# F G L M N  -- Conformance Switch
    $elif $.n_state_2 == '#'
	# 3 4 5 6 8  -- Hight, Width, 'E' alignment
    $elif $.n_state_2 == '%'
	# @ G        -- Default and UTF8 Charset
    $elif $.n_state_2 == '('
	# -- Switch Charset G0
	# 0 LineDrawing
	# A UK # B US
	# 4 Dutch   5|C Finnish   R French   Q French Canadian
	# K German    Y Italian   6|E Norwegian/Danish
	# Z Spanish 7|H Swidish   = Swiss
    $elif $.n_state_2 == ')'
	# -- Switch Charset G1
    $elif $.n_state_2 == '*'
	# -- Switch Charset G2 (VT220)
    $elif $.n_state_2 == '+'
	# -- Switch Charset G3 (VT220)
    $elif $.n_state_2 == '-'
	# -- Switch Charset G1 (VT300)
    $elif $.n_state_2 == '.'
	# -- Switch Charset G2 (VT300)
    $elif $.n_state_2 == '/'
	# -- Switch Charset G3 (VT300)

# #######################################################################
