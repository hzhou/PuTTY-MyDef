subcode:: global
    $global extern Config cfg
    $struct(controlset) char * pathname, char * boxname, char * boxtitle, int ncolumns, int ncontrols, int ctrlsize, union control ** ctrls
    $struct(cfgbox) int nctrlsets, int ctrlsetsize, struct controlset ** ctrlsets, int nfrees, int freesize, void ** frees

    $global struct controlbox * p_ctrlbox
    $global struct winctrls struct_ctrl_base
    $global struct winctrls struct_ctrl_panel

subcode: run_config
    $call config_init

    ctrlbox = ctrl_new_box();
    setup_config_box(ctrlbox, $(tb_reconfig), $(protocol), $(protcfginfo), $(storage_type)) 
    win_setup_config_box(ctrlbox, &dp.hwnd, has_help(), $(tb_reconfig), $(protocol))
    dp_init(&dp);
    winctrl_init(&ctrls_base);
    winctrl_init(&ctrls_panel);
    dp_add_tree(&dp, &ctrls_base);
    dp_add_tree(&dp, &ctrls_panel);
    dp.wintitle = dupprintf("%s Configuration", appname);
    dp.errtitle = dupprintf("%s Error", appname);
    dp.data = &cfg;
    dlg_auto_set_fixed_pitch_flag(&dp);
    dp.shortcuts['g'] = TRUE # the treeview: `Cate&gory' 
    $global n_config_state
    n_config_state=0
    $call run_config_window
    $if n_config_state<0
	tn_ret=0
    ctrl_free_box(ctrlbox);
    winctrl_cleanup(&ctrls_panel);
    winctrl_cleanup(&ctrls_base);
    dp_cleanup(&dp);

    $call config_finish

subcode: run_config_window
    $call register_wndclass, "PuTTYConfigBox", DIALOG, IDC_ARROW, IDI_CFGICON, CS_DBLCLKS | CS_SAVEBITS | CS_BYTEALIGNWINDOW
    $local HWND hwnd_config

    $call create_dialog, config, hwnd_config

    $local MSG msg
    $while GetMessage(&msg, NULL, 0, 0) > 0
	$if n_config_state==0 && !IsDialogMessage(hwnd_config, &msg)
	    DispatchMessage(&msg);
	$if n_config_state
	    goto EndConfig
    PostQuitMessage(msg.wParam)

    EndConfig:
    DestroyWindow(hwnd_config)

fncode: do_config
    $(set:tb_reconfig=FALSE)
    $(mset:protocol=0,protcfginfo=0,storage_type=0)
    $call run_config
    return tn_ret

fncode: do_reconfig(HWND hwnd, int protcfginfo)
    $local Config backup_cfg
    backup_cfg = cfg
    $(set:tb_reconfig=TRUE)
    $(mset:protocol=cfg.protocol,protcfginfo=protcfginfo,storage_type=cfg.session_storagetype)
    $call run_config
    $if !tn_ret
	cfg = backup_cfg
    return tn_ret

subcode: SaneEndDialog(hwnd, ret)
    SetWindowLongPtr($(hwnd), BOXFLAGS, DF_END)

# ---- config ---------------------------
resource: dialog_config, dialog_default
    size: 0, 0, 300, 262
    caption: PuTTY Configuration
    class: PuTTYConfigBox
    text_Category
	text: Cate&gory
	size: 3, 3, 95, 10
    control_Category
	class: WC_TREEVIEW
	size: 3, 13, 95, 229
	style: WS_TABSTOP | TVS_HASLINES | TVS_DISABLEDRAGDROP | TVS_HASBUTTONS | TVS_LINESATROOT | TVS_SHOWSELALWAYS

# ---- WM_INITDIALOG
subcode: config_init_help
    $if has_help()
	SetWindowLongPtr(hwnd, GWL_EXSTYLE, GetWindowLongPtr(hwnd, GWL_EXSTYLE) | WS_EX_CONTEXTHELP);
    $else
	$local HWND h_temp
	h_temp = GetDlgItem(hwnd, IDC_HELPBTN);
	$if h_temp
	    DestroyWindow(h_temp)

subcode: config_init_center_window
    $local HWND h_temp, RECT rs, RECT rd
    h_temp = GetDesktopWindow();
    $if GetWindowRect(hw, &rs) && GetWindowRect(hwnd, &rd)
	tn_w=rd.right-rd.left
	tn_h=rd.bottom-rd.top
	tn_x=(rs.right+rs.left)/2 - tn_w/2
	tn_y=(rs.bottom+rs.top)/2 - tn_h/2
	MoveWindow(hwnd, tn_x, tn_y, tn_w, tn_h, TRUE)

subcode: config_on_WM_INITDIALOG
    $call config_init_dialog_setup, hwnd

    $(set:IDC_BASE=IDC_ABOUT)
    $define IDCX_TVSTATIC=IDC_ABOUT+1
    $define IDCX_TREEVIEW=IDC_ABOUT+2
    $define IDCX_STDBASE =IDC_ABOUT+3
    $define IDCX_PANELBASE=IDCX_STDBASE+32

    $(mset:dlg_hwnd=hwnd, dlg_inst=hinst)
    dp.hwnd = hwnd;
    # Open and Cancel buttons etc 
    create_controls(hwnd, "") 
    SetWindowText(hwnd, dp.wintitle);
    SetWindowLongPtr(hwnd, GWLP_USERDATA, 0);
    $call config_init_help
    $call config_init_center_window
    $call create_static,   IDCX_TVSTATIC, 3, 3,  95, 10, "Cate&gory"
    $call create_treeview, IDCX_TREEVIEW, 3, 13, 95, 229
    $call config_fill_treeview, h_temp
    $local HTREEITEM hti_first
    hti_first=TreeView_GetFirstVisible(h_temp)
    # triggers WM_NOTITFY which loads the panel
    TreeView_SelectItem(h_temp, hti_first);

    $for tn_ctrl=0:n_da_len_config_ctrls
	$if config_ctrls[tn_ctrl]->ctrl
	    dlg_set_focus(config_ctrls[tn_ctrl]->ctrl, &dp)
	    break

    SetWindowLongPtr(hwnd, GWLP_USERDATA, 1);
    return 0;

# ---- Load a panel of controls ----
subcode: config_on_WM_NOTIFY
    $if LOWORD(wParam) == IDCX_TREEVIEW && ((LPNMHDR) lParam)->code == TVN_SELCHANGED
	SendMessage (hwnd, WM_SETREDRAW, FALSE, 0);
	$call config_clear_panel

	$local TVITEM struct_tvitem
	struct_tvitem.hItem = TreeView_GetSelection(((LPNMHDR) lParam)->hwndFrom);
	struct_tvitem.mask = TVIF_PARAM;
	TreeView_GetItem(((LPNMHDR) lParam)->hwndFrom, &struct_tvitem);
	$call config_init_panel, struct_tvitem.lParam

	dlg_refresh(NULL, &dp);    /* set up control values */

	SendMessage (hwnd, WM_SETREDRAW, TRUE, 0);
	InvalidateRect (hwnd, NULL, TRUE);
	SetFocus(((LPNMHDR) lParam)->hwndFrom)
	return 0;
    break;

# --- draw panel title ----
subcode: config_on_WM_DRAWITEM
    tn_id=LOWORD(wparam)
    $if tn_id==IDC_PANELTITLE
	$local LPDRAWITEMSTRUCT tp_drawitemstruct
	tp_drawitemstruct = (LPDRAWITEMSTRUCT) lparam
	HDC hdc = tp_drawitemstruct->hDC
	$local RECT rct_temp
	rct_temp = tp_drawitemstruct->rcItem

	SetMapMode(hdc, MM_TEXT)
	$local SIZE sz_temp
	tn_len=strlen(s_config_panel_title)
	GetTextExtentPoint32(hdc,s_config_panel_title,tn_len,&sz_temp)
	DrawEdge(hdc, &rct_temp, EDGE_ETCHED, BF_ADJUST | BF_RECT);
	tn_x=rct_temp.left+(rct_temp.right-rct_temp.left-sz_temp.cx)/2
	tn_y=rct_temp.top+(rct_temp.bottom-rct_temp.top-sz_temp.cy)/2
	TextOut(hdc, tn_x, tn_y, s_config_panel_title, tn_len)
    return 1

# ===========================================
subcode: config_on_default
    $if GetWindowLongPtr(hwnd, GWLP_USERDATA) == 1
	tn_ret = winctrl_handle_command(&dp, msg, wParam, lParam);
	$if dp.ended && GetCapture() != hwnd
	    $call SaneEndDialog, hwnd, dp.endresult
    $else
	tn_ret = 0;
    return tn_ret

subcode: config_on_WM_LBUTTONUP
    ReleaseCapture()
    $if dp.ended
	$call SaneEndDialog, hwnd, dp.endresult

subcode: config_on_WM_HELP
    $if !winctrl_context_help(&dp, hwnd, ((LPHELPINFO)lParam)->iCtrlId)
	MessageBeep(0)

subcode: config_on_WM_SIZE
    $if wparam == SIZE_MAXIMIZED
	$local static int tn_config_recurse=0
	$local WINDOWPLACEMENT struct_wp
	$if !tn_config_recurse
	    tn_config_recurse=1
	    struct_wp.length=sizeof(struct_wp)
	    $if GetWindowPlacement(hwnd, &struct_wp)
		$if struct_wp.showCmd==SW_SHOWMAXIMIZED
		    struct_wp.showCmd=SW_SHOWNORMAL
		    SetWindowPlacement(hwnd, &struct_wp)
	    tn_config_recurse=0
    return 0

subcode: config_on_WM_CLOSE
    quit_help(hwnd)
    $call SaneEndDialog, hwnd, 0

# ############################################################
subcode: config_init

subcode: config_finish

# ############################################################

subcode: local_data
    struct charclass_data *ccd;
    struct colour_data *cd;
    struct ttymodes_data *td;
    struct environ_data *ed;
    struct portfwd_data *pfd;
    union control *c;
    int current_storagetype;

subcode: sessionsaver_init
    $local struct sessionsaver_data *p_ssd
    $allocate p_ssd
    $call config_register_mem, p_ssd
    memset(p_ssd, 0, sizeof(*p_ssd))
    p_ssd->midsession = $(tb_reconfig)

subcode: ctrlset_standard
    $local struct controlset * p_controlset
     #* The standard panel that appears at the bottom of all panels:
    p_controlset = ctrl_getset(b, "", "", "");
    ctrl_columns(p_controlset, 5, 20, 20, 20, 20, 20);
    $if tb_reconfig
	p_ssd->okbutton=ctrl_pushbutton(p_controlset, "Apply", 'a', HELPCTX(no_help), sessionsaver_handler, P(p_ssd))
    $else
	p_ssd->okbutton=ctrl_pushbutton(p_controlset, "Open", 'o', HELPCTX(no_help), sessionsaver_handler, P(p_ssd))
    p_ssd->okbutton->button.isdefault = TRUE;
    p_ssd->okbutton->generic.column = 3;
    p_ssd->cancelbutton = ctrl_pushbutton(p_controlset, "Cancel", 'c', HELPCTX(no_help), sessionsaver_handler, P(p_ssd));
    p_ssd->cancelbutton->button.iscancel = TRUE;
    p_ssd->cancelbutton->generic.column = 4;

fncode: setup_config_box(struct controlbox *b, tb_reconfig, int protocol, int protcfginfo, int session_storagetype)
    $call local_data
    $call sessionsaver_init
    $call ctrlset_standard
