 # Compress and decompress a termline into an RLE-based format for storing in scrollback
subcode:: global
    $struct(buf) unsigned char * data, int len, int size
    $(set:getbuf=$(1)->data[$(1)->len++])
    $list buf_add, buf_get
# ----
fncode: buf_add(struct buf *b, unsigned char c)
    $if b->len >= b->size
	b->size = (b->len * 3 / 2) + 512;
	b->data = sresize(b->data, b->size, unsigned char);
    b->data[b->len++] = c

fncode: buf_get(struct buf *b)
    return b->data[b->len++]

subcode: buf_add_int(b, n)
    n=$(n)
    $while n >= 128
	buf_add($(b), (unsigned char)((n & 0x7F) | 0x80))
	n >>= 7
    buf_add($(b), (unsigned char)(n))

subcode: buf_get_int(b, n)
    $(n)=0
    tn_shift=0
    $while 1
	tn_byte=buf_get($(b))
	$if tn_byte & 0x80
	    $(n)|=(tn_byte&0x7F)<<tn_shift
	    tn_shift+=7
	$else
	    $(n)|=(tn_byte&0x7F)<<tn_shift
	    break
# ----------------------------------------------
subcode:: function_list
    $typedef void (* FnMakeLiteral)(struct buf *b, termchar * c, unsigned long *state)
    $typedef void (* FnReadLiteral)(struct buf *b, termchar * c, termline *ldata, unsigned long *state)
    $list makeliteral_chr, makeliteral_attr, makeliteral_cc
    $list readliteral_chr, readliteral_attr, readliteral_cc
    $list makerle, readrle
    $list compressline, decompressline

subcode: make_rle_1
    $if tb_prev2
	tn_hdrsize-=2
	tn_pos0 -= tn_len0;/* and possibly another one */
    $lese
	tn_hdrsize--

    $if tn_hdrsize == 0
	b->len = tn_pos0+tn_len0;
    $else
	memmove(b->data + tn_pos0+1, b->data + tn_pos0, tn_len0);
	tn_pos0++
	b->len = tn_pos0+tn_len0+1;
	/* * Terminate the previous run of ordinary * literals.  */
	b->data[tn_hdrpos] = tn_hdrsize - 1;
    $call make_rle_2

subcode: make_rle_2
    tn_runlen = tb_prev2 ? 3 : 2;
    $while i<ldata->cols > 0 && tn_runlen < 129
	# -- push
	unsigned long tn_state_old = tn_state;
	$call make_rle_push
	# -- pop
	b->len = tn_pos2
	$if $(match)
	    i++
	    tp_char++
	    tn_runlen++
	$else
	    tn_state = tn_state_old
	    break
    b->data[tn_pos0-1] = tn_runlen + 0x80 - 2;
    $call make_rle_init

subcode: make_rle_init
    # tn_len0=0 will not match any literal
    tn_hdrpos = b->len
    tn_hdrsize = 0
    buf_add(b, 0)
    tn_pos0=0
    tn_len0=0
    tb_prev2=0

subcode: make_rle_push
    tn_pos1 = b->len;
    makeliteral(b, tp_char++, &tn_state);
    tn_len1 = b->len - tn_pos1;

fncode: makerle(struct buf *b, termline *ldata, FnMakeLiteral makeliteral)
    $(set:match=tn_len1==tn_len0&&memcmp(b->data+tn_pos0,b->data+tn_pos1,tn_len1)==0)
    $local termchar *tp_char 
    tp_char = ldata->chars;
    tn_pos = b->len;
    tn_size = 0;

    $call make_rle_init
    $local i
    $while i<ldata->cols
	i++
	# -- push
	$local unsigned long tn_state=0
	$call make_rle_push
	$if $(match)
	    $if tn_len1 > 1 || tb_prev2
		$call make_rle_1
		continue;
	    $else
		tb_prev2 = TRUE;
		tn_pos0 = tn_pos1;
	$else
	    tb_prev2 = FALSE;
	    tn_pos0 = tn_pos1;
	    tn_len0 = tn_len1;

	# -- not in a run --
	tn_hdrsize++;
	$if tn_hdrsize == 128
	    b->data[tn_hdrpos] = tn_hdrsize - 1;
	    $call make_rle_init

    /* * Clean up.  */
    $if tn_hdrsize > 0
	b->data[tn_hdrpos] = tn_hdrsize - 1;
    $lese
	b->len = tn_hdrpos;

# ------------------------------------------------------------
fncode: readrle(struct buf *b, termline *ldata, FnReadLiteral readliteral)
    unsigned long tn_state = 0
    i=0
    $while i < ldata->cols
	tn_byte = get(b);
	$if tn_byte >= 0x80
	    tn_pos = b->len
	    tn_count=tn_byte+2-0x80
	    $while tn_count--
		assert(i < ldata->cols);
		b->len = tn_pos;
		readliteral(b, ldata->chars + i, ldata, &tn_state);
		i++
	$else
	    tn_count = tn_byte + 1
	    $while tn_count--
		assert(n < ldata->cols);
		readliteral(b, ldata->chars + i, ldata, &tn_state);
		i++;

# ------------------------------------------------------------
fncode: makeliteral_chr(struct buf *b, termchar *p_char, unsigned long * pn_state)
    $if ((p_char->chr & ~0x7F) == *pn_state
	buf_add(b, (unsigned char)(p_char->chr & 0x7F));
    $elif (p_char->chr < 0x4000)
	buf_add(b, (unsigned char)(((p_char->chr >> 8) & 0x3F) | 0x80));
	buf_add(b, (unsigned char)(p_char->chr & 0xFF));
    $elif (p_char->chr < 0x200000)
	buf_add(b, (unsigned char)(((p_char->chr >> 16) & 0x1F) | 0xC0));
	buf_add(b, (unsigned char)((p_char->chr >> 8) & 0xFF));
	buf_add(b, (unsigned char)(p_char->chr & 0xFF));
    $elif (p_char->chr < 0x10000000)
	buf_add(b, (unsigned char)(((p_char->chr >> 24) & 0x0F) | 0xE0));
	buf_add(b, (unsigned char)((p_char->chr >> 16) & 0xFF));
	buf_add(b, (unsigned char)((p_char->chr >> 8) & 0xFF));
	buf_add(b, (unsigned char)(p_char->chr & 0xFF));
    $else
	buf_add(b, 0xF0);
	buf_add(b, (unsigned char)((p_char->chr >> 24) & 0xFF));
	buf_add(b, (unsigned char)((p_char->chr >> 16) & 0xFF));
	buf_add(b, (unsigned char)((p_char->chr >> 8) & 0xFF));
	buf_add(b, (unsigned char)(p_char->chr & 0xFF));
    *pn_state = p_char->chr & ~0xFF;

fncode: makeliteral_attr(struct buf *b, termchar *p_char, unsigned long *pn_state)
    $local unsigned tn_attr
    $local unsigned tn_color

    tn_attr = p_char->attr;
    tn_color = (tn_attr >> (ATTR_BGSHIFT + 4)) & 0xF;
    tn_color <<= 4;
    tn_color |= (tn_attr >> (ATTR_FGSHIFT + 4)) & 0xF;

    tn_attr = (((tn_attr >> (ATTR_BGSHIFT + 8)) << (ATTR_BGSHIFT + 4)) | (tn_attr & ((1 << (ATTR_BGSHIFT + 4))-1)));
    tn_attr = (((tn_attr >> (ATTR_FGSHIFT + 8)) << (ATTR_FGSHIFT + 4)) | (tn_attr & ((1 << (ATTR_FGSHIFT + 4))-1)));

    tn_attr |= (tn_color << (32-9));

    $if tn_attr < 0x8000
	buf_add(b, (unsigned char)((tn_attr >> 8) & 0xFF));
	buf_add(b, (unsigned char)(tn_attr & 0xFF));
    $else
	buf_add(b, (unsigned char)(((tn_attr >> 24) & 0x7F) | 0x80));
	buf_add(b, (unsigned char)((tn_attr >> 16) & 0xFF));
	buf_add(b, (unsigned char)((tn_attr >> 8) & 0xFF));
	buf_add(b, (unsigned char)(tn_attr & 0xFF));

fncode: makeliteral_cc(struct buf *b, termchar *p_char, unsigned long *pn_state)
    $local unsigned long tn_state
    tn_state=0
    $while p_char->cc_next
	p_char += p_char->cc_next
	assert(p_char->chr != 0);
	makeliteral_chr(b, p_char, &tn_state);
    buf_add(b, 0)

# -------------
fncode: readliteral_chr(struct buf *b, termchar *p_char, termline *ldata, unsigned long *pn_state)
    /*
     * 00000000-0000007F: 0xxxxxxx
     * 00000080-00003FFF: 10xxxxxx xxxxxxxx
     * 00004000-001FFFFF: 110xxxxx xxxxxxxx xxxxxxxx
     * 00200000-0FFFFFFF: 1110xxxx xxxxxxxx xxxxxxxx xxxxxxxx
     * 10000000-FFFFFFFF: 11110ZZZ xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
     */

    tn_byte = get(b);
    $if tn_byte < 0x80
	p_char->chr = tn_byte | *pn_state;
    $elif tn_byte < 0xC0
	p_char->chr = (tn_byte &~ 0xC0) << 8;
	p_char->chr |= get(b);
    $elif tn_byte < 0xE0
	p_char->chr = (tn_byte &~ 0xE0) << 16;
	p_char->chr |= get(b) << 8;
	p_char->chr |= get(b);
    $elif tn_byte < 0xF0
	p_char->chr = (tn_byte &~ 0xF0) << 24;
	p_char->chr |= get(b) << 16;
	p_char->chr |= get(b) << 8;
	p_char->chr |= get(b);
    $else
	#assert(tn_byte == 0xF0);
	p_char->chr = get(b) << 24;
	p_char->chr |= get(b) << 16;
	p_char->chr |= get(b) << 8;
	p_char->chr |= get(b);
    *pn_state = p_char->chr & ~0xFF;

fncode: readliteral_attr(struct buf *b, termchar *p_char, termline *ldata, unsigned long *pn_state)
    tu_val = get(b) << 8;
    tu_val |= get(b);

    $if tu_val >= 0x8000
	tu_val &= ~0x8000;
	tu_val <<= 16;
	tu_val |= get(b) << 8;
	tu_val |= get(b);

    tu_colourbits = (tu_val >> (32-9)) & 0xFF;
    tu_attr = (tu_val & ((1<<(32-9))-1));

    tu_attr = (((tu_attr >> (ATTR_FGSHIFT + 4)) << (ATTR_FGSHIFT + 8)) | (tu_attr & ((1 << (ATTR_FGSHIFT + 4))-1)));
    tu_attr = (((tu_attr >> (ATTR_BGSHIFT + 4)) << (ATTR_BGSHIFT + 8)) | (tu_attr & ((1 << (ATTR_BGSHIFT + 4))-1)));
    tu_attr |= (tu_colourbits >> 4) << (ATTR_BGSHIFT + 4);
    tu_attr |= (tu_colourbits & 0xF) << (ATTR_FGSHIFT + 4);
    p_char->attr = tu_attr;

fncode: readliteral_cc(struct buf *b, termchar *p_char, termline *ldata, unsigned long *pn_state)
    p_char->cc_next = 0;

    tn_pos = p_char - ldata->chars;
    $local termchar t_char
    $local unsigned long tn_state
    tn_state=0
    $while 1
	readliteral_chr(b, &t_char, ldata, &tn_state);
	$if !t_char.chr
	    break;
	add_cc(ldata, tn_pos, t_char.chr);

# -------------------------------------------------------------------------
fncode: compressline(termline *ldata)
    $return_type unsigned char *
    $localinit struct buf buffer={NULL,0,0}
    $local struct buf *b 
    b= &buffer

    $call buf_add_int, b, ldata->cols
    $call buf_add_int, b, ldata->lattr
    makerle(b, ldata, makeliteral_chr);
    makerle(b, ldata, makeliteral_attr);
    makerle(b, ldata, makeliteral_cc);
    return sresize(b->data, b->len, unsigned char);

fncode: decompressline(unsigned char *data, int *bytes_used)
    $return_type termline *
    int ncols, byte, shift;
    struct buf buffer, *b = &buffer;

    $local struct buf buffer
    $local struct buf *b
    b=&buffer
    b->data = data;
    b->len = 0;

    $call buf_get_int, b, tn_cols

    $local termline *ldata;
    ldata = snew(termline);
    ldata->chars = snewn(tn_cols, termchar);
    ldata->cols = tn_cols
    ldata->size = tn_cols
    ldata->temporary = TRUE;
    ldata->cc_free = 0;

    $for i = 0:tn_cols
	ldata->chars[i].cc_next = 0;

    $call buf_get_int, b, ldata->lattr

    readrle(b, ldata, readliteral_chr);
    readrle(b, ldata, readliteral_attr);
    readrle(b, ldata, readliteral_cc);

    /* Return the number of bytes read, for diagnostic purposes. */
    $if bytes_used
	*bytes_used = b->len;

    return ldata;

####################################################################################
