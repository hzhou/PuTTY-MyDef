
subcode: on_IDM_RECONF
    Config prev_cfg;
    int init_lvl = 1;
    int reconfig_result;

    /*
     * HACK: PuttyTray / Session Icon
     */ 
    HINSTANCE inst;
    HICON hIcon;

    $global int reconfiguring=0
    $if reconfiguring
	break;
    $else
	reconfiguring = TRUE;

    $local Config prev_cfg
    GetWindowText(hwnd, cfg.wintitle, sizeof(cfg.wintitle));
    prev_cfg = cfg;

    tn_ret = do_reconfig(hwnd, back ? back->cfg_info(backhandle) : 0);
    reconfiguring = FALSE;
    $if !tn_ret
	break;
    $else
	/* Disable full-screen if resizing forbidden */
	int i;
	for (i = 0; i < lenof(popup_menus); i++)
	    EnableMenuItem(popup_menus[i].menu, IDM_FULLSCREEN, MF_BYCOMMAND | (cfg.resize_action == RESIZE_DISABLED) ? MF_GRAYED : MF_ENABLED);
	/* Gracefully unzoom if necessary */
	if (IsZoomed(hwnd) && (cfg.resize_action == RESIZE_DISABLED)) {
	    ShowWindow(hwnd, SW_RESTORE);
	}

    /* Pass new config data to the logging module */
    log_reconfig(logctx, &cfg);
    sfree(logpal);
    /*
     * Flush the line discipline's edit buffer in the
     * case where local editing has just been disabled.
     */
    if (ldisc)
	ldisc_send(ldisc, NULL, 0, 0);
    if (pal)
	DeleteObject(pal);
    logpal = NULL;
    pal = NULL;
    cfgtopalette();
    init_palette();

    /* Pass new config data to the terminal */
    term_reconfig(term, &cfg);

    /* Pass new config data to the back end */
    if (back)
	back->reconfig(backhandle, &cfg);

    /*
     * HACK: PuttyTray / Transparency
     * Reconfigure
     */
    if (cfg.transparency >= 50) {
	    if (cfg.transparency > 255) {
		    MakeWindowTransparent(hwnd, 255);
	    } else {
		    MakeWindowTransparent(hwnd, cfg.transparency);
	    }
    } else {
	    MakeWindowTransparent(hwnd, 255);
    }

    /*
     * HACK: PuttyTray / Nutty
     * Reconfigure
     */
    if (cfg.url_defregex == 0) {
	    urlhack_set_regular_expression(cfg.url_regex);
    }
    term->url_update = TRUE;
    term_update(term);

    /*
     * HACK: PuttyTray / Session Icon
     * Reconfigure
     */
    if (cfg.win_icon[0]) {
	    hIcon = extract_icon(cfg.win_icon, TRUE);
	    DestroyIcon(puttyTray.hIcon);
	    puttyTray.hIcon = hIcon;
	    SetClassLongPtr(hwnd, GCLP_HICON, (LONG_PTR)extract_icon(cfg.win_icon, FALSE));
	    SetClassLongPtr(hwnd, GCLP_HICONSM, (LONG_PTR)hIcon);
    } else {
	    inst = (HINSTANCE) GetWindowLongPtr(hwnd, GWLP_HINSTANCE);
	    DestroyIcon(puttyTray.hIcon);
	    puttyTray.hIcon	= LoadImage(inst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR|LR_SHARED);
	    SetClassLongPtr(hwnd, GCLP_HICON, (LONG_PTR)LoadImage(inst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON, GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON), LR_DEFAULTCOLOR|LR_SHARED));
	    SetClassLongPtr(hwnd, GCLP_HICONSM, (LONG_PTR)LoadImage(inst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR|LR_SHARED));
    }
    if (puttyTrayVisible) {
	    taskbar_addicon(cfg.win_name_always ? window_name : icon_name, TRUE);
    }

    /*
     * HACK: PuttyTray
     * Reconfigure
     */
    if (cfg.tray == TRAY_NORMAL || cfg.tray == TRAY_START) {
	    if (windowMinimized) {
		    ShowWindow(hwnd, SW_HIDE);
		    taskbar_addicon(cfg.win_name_always ? window_name : icon_name, TRUE);
	    } else {
		    taskbar_addicon("", FALSE);
	    }
    } else if (cfg.tray == TRAY_ALWAYS) {
	    taskbar_addicon(cfg.win_name_always ? window_name : icon_name, TRUE);
    } else {
	    taskbar_addicon("", FALSE);
    }

    /* Screen size changed ? */
    $if cfg.savelines != prev_cfg.savelines
	term_set_scrollback_size(term, cfg.savelines)
    $if cfg.height != prev_cfg.height || cfg.width != prev_cfg.width || cfg.resize_action == RESIZE_FONT || (cfg.resize_action == RESIZE_EITHER && IsZoomed(hwnd)) || cfg.resize_action == RESIZE_DISABLED)
	term_size(term, cfg.height, cfg.width)

    /* Enable or disable the scroll bar, etc */
    {
	LONG nflg, flag = GetWindowLongPtr(hwnd, GWL_STYLE);
	LONG nexflag, exflag =
	    GetWindowLongPtr(hwnd, GWL_EXSTYLE);

	nexflag = exflag;
	if (cfg.alwaysontop != prev_cfg.alwaysontop) {
	    if (cfg.alwaysontop) {
		nexflag |= WS_EX_TOPMOST;
		SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, 0, 0,
			     SWP_NOMOVE | SWP_NOSIZE);
		//HACK: PuttyTray / Always on top:
		CheckMenuItem(GetSystemMenu(hwnd, FALSE), IDM_VISIBLE, MF_CHECKED);
	    } else {
		nexflag &= ~(WS_EX_TOPMOST);
		SetWindowPos(hwnd, HWND_NOTOPMOST, 0, 0, 0, 0,
			     SWP_NOMOVE | SWP_NOSIZE);
		//HACK: PuttyTray / Always on top:
		CheckMenuItem(GetSystemMenu(hwnd, FALSE), IDM_VISIBLE, MF_UNCHECKED);
	    }
	}
	if (cfg.sunken_edge)
	    nexflag |= WS_EX_CLIENTEDGE;
	else
	    nexflag &= ~(WS_EX_CLIENTEDGE);

	nflg = flag;
	if (is_full_screen() ?
	    cfg.scrollbar_in_fullscreen : cfg.scrollbar)
	    nflg |= WS_VSCROLL;
	else
	    nflg &= ~WS_VSCROLL;

	if (cfg.resize_action == RESIZE_DISABLED ||
	    is_full_screen())
	    nflg &= ~WS_THICKFRAME;
	else
	    nflg |= WS_THICKFRAME;

	if (cfg.resize_action == RESIZE_DISABLED)
	    nflg &= ~WS_MAXIMIZEBOX;
	else
	    nflg |= WS_MAXIMIZEBOX;

	if (nflg != flag || nexflag != exflag) {
	    if (nflg != flag)
		SetWindowLongPtr(hwnd, GWL_STYLE, nflg);
	    if (nexflag != exflag)
		SetWindowLongPtr(hwnd, GWL_EXSTYLE, nexflag);

	    SetWindowPos(hwnd, NULL, 0, 0, 0, 0,
			 SWP_NOACTIVATE | SWP_NOCOPYBITS |
			 SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER |
			 SWP_FRAMECHANGED);

	    init_lvl = 2;
	}
    }

    /* Oops */
    if (cfg.resize_action == RESIZE_DISABLED && IsZoomed(hwnd)) {
	force_normal(hwnd);
	init_lvl = 2;
    }

    set_title(NULL, cfg.wintitle);
    if (IsIconic(hwnd)) {
	SetWindowText(hwnd,
		      cfg.win_name_always ? window_name :
		      icon_name);
    }

    if (strcmp(cfg.font.name, prev_cfg.font.name) != 0 ||
	strcmp(cfg.line_codepage, prev_cfg.line_codepage) != 0 ||
	cfg.font.isbold != prev_cfg.font.isbold ||
	cfg.font.height != prev_cfg.font.height ||
	cfg.font.charset != prev_cfg.font.charset ||
	cfg.font_quality != prev_cfg.font_quality ||
	cfg.vtmode != prev_cfg.vtmode ||
	cfg.bold_colour != prev_cfg.bold_colour ||
	cfg.resize_action == RESIZE_DISABLED ||
	cfg.resize_action == RESIZE_EITHER ||
	(cfg.resize_action != prev_cfg.resize_action))
	init_lvl = 2;

    InvalidateRect(hwnd, NULL, TRUE);
    reset_window(init_lvl);
    net_pending_errors();

fncode: term_reconfig(Terminal *term, Config *cfg)
    /*
     * Before adopting the new config, check all those terminal
     * settings which control power-on defaults; and if they've
     * changed, we will modify the current state as well as the
     * default one. The full list is: Auto wrap mode, DEC Origin
     * Mode, BCE, blinking text, character classes.
     */
    int reset_wrap, reset_decom, reset_bce, reset_tblink, reset_charclass;
    int i;

    reset_wrap = (term->cfg.wrap_mode != cfg->wrap_mode);
    reset_decom = (term->cfg.dec_om != cfg->dec_om);
    reset_bce = (term->cfg.bce != cfg->bce);
    reset_tblink = (term->cfg.blinktext != cfg->blinktext);
    reset_charclass = 0;
    for (i = 0; i < lenof(term->cfg.wordness); i++)
	if (term->cfg.wordness[i] != cfg->wordness[i])
	    reset_charclass = 1;

    /*
     * If the bidi or shaping settings have changed, flush the bidi
     * cache completely.
     */
    if (term->cfg.arabicshaping != cfg->arabicshaping ||
	term->cfg.bidi != cfg->bidi) {
	for (i = 0; i < term->bidi_cache_size; i++) {
	    sfree(term->pre_bidi_cache[i].chars);
	    sfree(term->post_bidi_cache[i].chars);
	    term->pre_bidi_cache[i].width = -1;
	    term->pre_bidi_cache[i].chars = NULL;
	    term->post_bidi_cache[i].width = -1;
	    term->post_bidi_cache[i].chars = NULL;
	}
    }

    term->cfg = *cfg;		       /* STRUCTURE COPY */

    if (reset_wrap)
	term->alt_wrap = term->wrap = term->cfg.wrap_mode;
    if (reset_decom)
	term->alt_om = term->dec_om = term->cfg.dec_om;
    if (reset_bce) {
	term->use_bce = term->cfg.bce;
	set_erase_char(term);
    }
    if (reset_tblink) {
	term->blink_is_real = term->cfg.blinktext;
    }
    if (reset_charclass)
	for (i = 0; i < 256; i++)
	    term->wordness[i] = term->cfg.wordness[i];

    if (term->cfg.no_alt_screen)
	swap_screen(term, 0, FALSE, FALSE);
    if (term->cfg.no_mouse_rep) {
	term->xterm_mouse = 0;
	set_raw_mouse_mode(term->frontend, 0);
    }
    if (term->cfg.no_remote_charset) {
	term->cset_attr[0] = term->cset_attr[1] = CSET_ASCII;
	term->sco_acs = term->alt_sco_acs = 0;
	term->utf = 0;
    }
    if (!*term->cfg.printer) {
	term_print_finish(term);
    }
    term_schedule_tblink(term);
    term_schedule_cblink(term);

